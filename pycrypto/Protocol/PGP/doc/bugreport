I've come across something that is either a bug in PGP, or a bug in
the doc/pgformat.doc specification included with PGP.  In crypto.c,
idea_file seems to assume that the length of its input is known; it
doesn't handle the case where lenfile==-1.

I'm (still) working on a PGP-compatible library, and was testing its
output versus the output of 'pgp -c'.  My code could unpack a
PGP-generated message, but PGP choked with a 'Bad pass phrase' error
on processing a file generated by my code.  A bit of exploration found
the problem; it wasn't due to the passphrase at all.  

The output of 'pgp -c' is a single ciphered packet, which contains a
plaintext or compressed packet.  'pgp -c' always generates a ciphered
packet where the length is explicitly given after the CTB; however, my
code is attempting to use only one pass at all times, and generates an
indefinite-length packet, since it doesn't know the length ahead of
time.  This causes the lenfile parameter passed to idea_file to be
negative, which causes an fread() for a negative number of items.  The
fread() returns zero, and idea_file reports an error.  I expect I'll
run into this again, as my code prefers to create indefinite-length
packets whenever it can.

So... should idea_file be fixed to handle lenfile==-1?  (A *very
lightly tested* patch to do this is appended--treat it with
suspicion.)  Or is this a specification bug in pgformat.doc?  


	Andrew Kuchling
	andrewk@cst.ca


*** ../orig-src/crypto.c	Fri Feb 23 09:25:30 1996
--- crypto.c	Fri Feb 23 09:50:51 1996
***************
*** 530,534 ****
  		/* See if the redundancy is present after the random prefix */
  		count = fread(textbuf,1,RAND_PREFIX_LENGTH+2,f);
! 		lenfile -= count;
  		if (count==(RAND_PREFIX_LENGTH+2)) {
  			ideaCfbDecrypt(&cfb, textbuf, textbuf,
--- 530,534 ----
  		/* See if the redundancy is present after the random prefix */
  		count = fread(textbuf,1,RAND_PREFIX_LENGTH+2,f);
! 		if (lenfile!=4294967295) lenfile -= count;
  		if (count==(RAND_PREFIX_LENGTH+2)) {
  			ideaCfbDecrypt(&cfb, textbuf, textbuf,
***************
*** 548,558 ****
  
  	/* read and write the whole file in CFB mode... */
! 	count = (lenfile < DISKBUFSIZE) ? (int)lenfile : DISKBUFSIZE;
  	while (count && status == 0) {
! 		if ((count = fread(textbuf,1,count,f)) <= 0) {
  			status = -3;
  			break;
  		}
! 		lenfile -= count;
  		if (decryp)
  			ideaCfbDecrypt(&cfb, textbuf, textbuf, count);
--- 548,559 ----
  
  	/* read and write the whole file in CFB mode... */
! 	count = (lenfile!=4294967295 && lenfile < DISKBUFSIZE) ? (int)lenfile : DISKBUFSIZE;
  	while (count && status == 0) {
! 		if ((count = fread(textbuf,1,count,f)) < 0) {
  			status = -3;
  			break;
  		}
! 		if (count==0) break; 
! 		if (lenfile!=4294967295) lenfile -= count;
  		if (decryp)
  			ideaCfbDecrypt(&cfb, textbuf, textbuf, count);
***************
*** 560,565 ****
  			ideaCfbEncrypt(&cfb, textbuf, textbuf, count);
  		if (fwrite(textbuf,1,count,g) != count)
! 			status = -3;
! 		count = (lenfile < DISKBUFSIZE) ? (int)lenfile : DISKBUFSIZE;
  	}
  
--- 561,567 ----
  			ideaCfbEncrypt(&cfb, textbuf, textbuf, count);
  		if (fwrite(textbuf,1,count,g) != count)
!                       status = -3;
! 		count = (lenfile!=4294967295 && lenfile < DISKBUFSIZE) 
! 		        ? (int)lenfile : DISKBUFSIZE;
  	}
  

