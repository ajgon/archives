BABYL OPTIONS: -*- rmail -*-
Version: 5
Labels:
Note:   This is the header of an rmail file.
Note:   If you are seeing it in rmail,
Note:    it means the file has no messages in it.

1, answered,,
Summary-line: 18-Sep             pobox@tiac.net  [87] #Re: Digital signature module
Mail-from: From python-list-request@cwi.nl  Wed Sep 17 23:01:39 1997
Return-Path: python-list-request@cwi.nl
Received: from grommit.magnet.com (grommit-int.magnet.com [208.192.176.4]) by lemur.magnet.com  with SMTP id XAA17092; Wed, 17 Sep 1997 23:01:38 -0400 (EDT)
Received: by grommit.magnet.com (951211.SGI.8.6.12.PATCH1042/Magnet)
	 id XAA09314; Wed, 17 Sep 1997 23:01:37 -0400
Received: from hera.cwi.nl(192.16.191.1) by grommit.magnet.com via smap (3.1)
	id xma009311; Wed, 17 Sep 97 23:01:27 -0400
Received: by hera.cwi.nl 
	id EAA17446; Thu, 18 Sep 1997 04:50:03 +0200 (MET DST)
To: python-list@cwi.nl
Sender: python-list-request@cwi.nl
Errors-To: python-list-request@cwi.nl
From: pobox@tiac.net (Jeff Macdonald)
Newsgroups: comp.lang.python
Subject: Re: Digital signature module
Date: Thu, 18 Sep 1997 02:31:28 GMT
X-Organization: slightly
Message-ID: <34208e46.8913966@news.tiac.net>
References: <199709171152.HAA27968@dolphin.automatrix.com>
	<199709171526.LAA20637@lemur.magnet.com>
Reply-To: pobox@tiac.net
X-Newsreader: Forte Free Agent 1.11/32.235

*** EOOH ***
Return-Path: python-list-request@cwi.nl
To: python-list@cwi.nl
Sender: python-list-request@cwi.nl
Errors-To: python-list-request@cwi.nl
From: pobox@tiac.net (Jeff Macdonald)
Newsgroups: comp.lang.python
Subject: Re: Digital signature module
Date: Thu, 18 Sep 1997 02:31:28 GMT
X-Organization: slightly
References: <199709171152.HAA27968@dolphin.automatrix.com>
	<199709171526.LAA20637@lemur.magnet.com>
Reply-To: pobox@tiac.net
X-Newsreader: Forte Free Agent 1.11/32.235

Andrew Kuchling <amk@magnet.com> wrote:

.. stuff deleted 

>	What exactly are you thinking of doing with Diffie-Hellman,
>though?  It only lets two sides agree on some shared secret data,
>which is only really useful with some additional encryption algorithm.

or with a secure hash, to do some MAC (?) type authorization.
Basically, once both sides have the shared secret, they hash that with
some plain text data (and probably time stamp stuff too).
 
>It's not hard to implement D-H with the things already in the digisign
>module:

I'll pull that over...

>
>	1) Generate a large prime p with the PrimeNumber function, and
>a primitive root a (2 will do).

Do you have any pointers to the generation of the primitive number?
I've seen posts that say 2 is good, but I would like to know why.

... rest of Diffie-Hellman removed

>Skip Montanaro <skip@calendar.com> wrote:
>>Python already supports arbitrarily long integers.  Is that not enough?
>
>	Depends on the application; the implementation of Python's
>long integers is in pure C, and the algorithms used are all fairly
>straightforward.  By way of contrast, in GMP 2.0.2 the algorithms are
>more elaborate, different ones are used for operands of different
>sizes, and there's optimized inline assembly code for x86, AXP,
>PowerPC, and a dozen other processors.	
>
>	The most recent version of gmp module can be used as a module,
>or it can be dropped on top of Objects/longobject.c, making Python use
>GMP long integers by default.  Unfortunately that also alters the
>format in which long integers are marshalled, which means marshal
>isn't compatible with everyone else when long integers are in use, and
>you have to regenerate all your *.pyc files.
>
>
>	Andrew Kuchling
>	amk@magnet.com
>	http://starship.skyport.net/crew/amk/

I missed that line about the arbitrarly long ints, and just looked it
up in Mark Lutz's book.

And on a completely different subject, I got Tom Christiansen's
<tchrist@jhereg.perl.com> 'Uneeded mime'  message to my non-mime post,
to which I replied :
Tom,
me thinks your perl script has gone amuck... perhaps you should be
using python... :)

and his reply was:

yup, you're right.

Which hopefully means that he's working on a Python book..... :)


1, answered,,
Summary-line: 19-Sep  Jeff_Macdonald@VirtualBui [116] #Re: Digital signature module
Mail-from: From Jeff_Macdonald@VirtualBuilder.com  Fri Sep 19 19:57:15 1997
Return-Path: Jeff_Macdonald@VirtualBuilder.com
Received: from grommit.magnet.com (grommit-int.magnet.com [208.192.176.4]) by lemur.magnet.com  with SMTP id TAA14038 for <amk@magnet.com>; Fri, 19 Sep 1997 19:57:14 -0400 (EDT)
Received: by grommit.magnet.com (951211.SGI.8.6.12.PATCH1042/Magnet)
	for <amk@magnet.com> id TAA03445; Fri, 19 Sep 1997 19:57:08 -0400
Received: from maildeliver0.tiac.net(199.0.65.19) by grommit.magnet.com via smap (3.1)
	id xma003443; Fri, 19 Sep 97 19:56:57 -0400
Received: from mailrelay.tiac.net (mailrelay.tiac.net [199.0.65.237]) by maildeliver0.tiac.net (8.8.0/8.8) with ESMTP id TAA30586 for <amk@magnet.com>; Fri, 19 Sep 1997 19:56:28 -0400 (EDT)
Received: from jeffmacd (pobox.tiac.net [199.3.136.237])
	by mailrelay.tiac.net (8.8.7/8.8.7) with SMTP id TAA04019
	for <amk@magnet.com>; Fri, 19 Sep 1997 19:57:47 -0400 (EDT)
Message-Id: <3.0.3.32.19970919195427.007d6870@pop.tiac.net>
X-Sender: pobox@pop.tiac.net
X-Mailer: QUALCOMM Windows Eudora Pro Version 3.0.3 (32)
Date: Fri, 19 Sep 1997 19:54:27 -0400
To: Andrew Kuchling <amk@magnet.com>
From: Jeff Macdonald <Jeff_Macdonald@VirtualBuilder.com>
Subject: Re: Digital signature module
In-Reply-To: <199709191907.PAA05854@lemur.magnet.com>
References: <34208e46.8913966@news.tiac.net>
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"

*** EOOH ***
Return-Path: Jeff_Macdonald@VirtualBuilder.com
X-Sender: pobox@pop.tiac.net
X-Mailer: QUALCOMM Windows Eudora Pro Version 3.0.3 (32)
Date: Fri, 19 Sep 1997 19:54:27 -0400
To: Andrew Kuchling <amk@magnet.com>
From: Jeff Macdonald <Jeff_Macdonald@VirtualBuilder.com>
Subject: Re: Digital signature module
In-Reply-To: <199709191907.PAA05854@lemur.magnet.com>
References: <34208e46.8913966@news.tiac.net>
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"

-----BEGIN PGP SIGNED MESSAGE-----

At 03:07 PM 9/19/97 -0400, you wrote:
>
>	BTW, according to Schneier's _Applied Cryptography_, 2nd ed.,
>(p-1)/2 should also be prime for security.  So p should be generated
>like this:
>
>while (1):
>	p2=digisign.PrimeNumber(< desired bit size - 1 >)
>	p=p2*2+1
>	if digisign.isPrime(p): break
>
>Also according to Schneier, you can check if a number g is a
>generator, by taking the prime factors of p-1; if pow(g, (p-1)/factor,
>p)!=1 for all the factors, it's a generator.  Following on the above
>example, there are only two factors, 2 and p2:
>
>while (1):
>	g=<some random number>
>	if not (pow(g, 2,  p)==1 or 
>	        pow(g, p2, p)==1): 
>	    break
>

Your talent for transforming algorithms to code is very impressive. It's hard
to believe I was a math major. :) I've been trying to code this for weeks.

>Hmm... it doesn't look too difficult to produce a Diffie-Hellman class
>after all, though I can't imagine what its interface should look like.
>Do you have any ideas about that?  
>

I've looked into several crypto libs, and the interface that I think would
make
most sense is to follow Bruce's book. Here's from Alice's point of view.

(n,g)=dh.generatePrimes(bitsizeOfN)	# set dh.n
# send bob n,g 
X=dh.generateX(RandomFunction)		# set dh.x
# send bob X
# get Bob's Y
k=dh.generate(Y)

Bob would need to use n and g, so we also need a

dh.setPrimes(n,g)

to be able to generate a Y. So from Bob's view:

# get n and g
dh.setPrimes(n,g)
# generate Y
Y=dh.generateX(RandomFunction)
# send Alice Y
# get Alice X
k=dh.generate(X)

A more general interface may look like this:

dh.setPrimes(n,g)
dh.generatePrimes(bitSize)
dh.generatePublic(RandomFuction)
dh.generatePrivate(publicKey)

In either Peter G. or Eric Y.'s lib, there are values of n and g that where
pre-computed for 512, 768, 1024, 2048 and 4096 bits. I believe these values
were suggest by NIST. This should speed things up, the only change to the 
interface would be:

dh.setPrimes(bitSize) 	# sh.setPrimes(n,g) should still exist

That would use the pre-computed values of n and g. Both parties would
have to agree on the bit size.

This looks very clean to me, what do you think?

I do have Bruce's book, and will be picking up 'Handbook of Applied
Crytpography'
this weekend. This book supposedly goes into more detail with the algorithms.




-----BEGIN PGP SIGNATURE-----
Version: PGP for Personal Privacy 5.0
Charset: noconv

iQCVAwUBNCMQsRxijdIqz8FNAQHqJwP/fF5vHyPlrzdihlj3BmnToFvrtz8W8l0p
7ZCcNCHIMwXC1a0Oi4TOi/Rx1banAs8C1bu/x42dwZbkBuMO4gYuh8pnImxLrYp6
BIUV13usq3eciAkq7Jvl/0h3K8ns6MVWiUjw+RAukb+yqRO3hObxonoTR5PTZum0
MaPYKsjtFMc=
=vQPL
-----END PGP SIGNATURE-----

----------------------------------------------
| Internet solutions for small companies     |
|                                            |
| email: Jeff_Macdonald@VirtualBuilder.com   |
| Web: www.VirtualBuilder.com                |
| PGP: www.VirtualBuilder.com/pgpkey.html    |
----------------------------------------------
			


1, answered,,
Summary-line: 20-Sep  Jeff_Macdonald@VirtualBui [161] #Diffie-Hellman
Mail-from: From Jeff_Macdonald@VirtualBuilder.com  Sat Sep 20 01:22:02 1997
Return-Path: Jeff_Macdonald@VirtualBuilder.com
Received: from grommit.magnet.com (grommit-int.magnet.com [208.192.176.4]) by lemur.magnet.com  with SMTP id BAA17238 for <amk@magnet.com>; Sat, 20 Sep 1997 01:22:02 -0400 (EDT)
Received: by grommit.magnet.com (951211.SGI.8.6.12.PATCH1042/Magnet)
	for <amk@magnet.com> id BAA05386; Sat, 20 Sep 1997 01:22:02 -0400
Received: from maildeliver0.tiac.net(199.0.65.19) by grommit.magnet.com via smap (3.1)
	id xma005384; Sat, 20 Sep 97 01:21:55 -0400
Received: from mailrelay.tiac.net (mailrelay.tiac.net [199.0.65.237]) by maildeliver0.tiac.net (8.8.0/8.8) with ESMTP id BAA28643 for <amk@magnet.com>; Sat, 20 Sep 1997 01:21:54 -0400 (EDT)
Received: from jeffmacd (pobox.tiac.net [199.3.136.237])
	by mailrelay.tiac.net (8.8.7/8.8.7) with SMTP id BAA20887
	for <amk@magnet.com>; Sat, 20 Sep 1997 01:23:17 -0400 (EDT)
Message-Id: <3.0.3.32.19970920011955.007da980@pop.tiac.net>
X-Sender: pobox@pop.tiac.net
X-Mailer: QUALCOMM Windows Eudora Pro Version 3.0.3 (32)
Date: Sat, 20 Sep 1997 01:19:55 -0400
To: Andrew Kuchling <amk@magnet.com>
From: Jeff Macdonald <Jeff_Macdonald@VirtualBuilder.com>
Subject: Diffie-Hellman
In-Reply-To: <199709191907.PAA05854@lemur.magnet.com>
References: <34208e46.8913966@news.tiac.net>
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"

*** EOOH ***
Return-Path: Jeff_Macdonald@VirtualBuilder.com
X-Sender: pobox@pop.tiac.net
X-Mailer: QUALCOMM Windows Eudora Pro Version 3.0.3 (32)
Date: Sat, 20 Sep 1997 01:19:55 -0400
To: Andrew Kuchling <amk@magnet.com>
From: Jeff Macdonald <Jeff_Macdonald@VirtualBuilder.com>
Subject: Diffie-Hellman
In-Reply-To: <199709191907.PAA05854@lemur.magnet.com>
References: <34208e46.8913966@news.tiac.net>
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"

-----BEGIN PGP SIGNED MESSAGE-----

>
>	BTW, according to Schneier's _Applied Cryptography_, 2nd ed.,
>(p-1)/2 should also be prime for security.  So p should be generated
>like this:
>
>while (1):
>	p2=digisign.PrimeNumber(< desired bit size - 1 >)
>	p=p2*2+1
>	if digisign.isPrime(p): break
>

Andrew, I tried the above algo, but your getPrime only take bits that are a
multiple
of 8 (besides, digisign doesn't have PrimeNumber!).

>Also according to Schneier, you can check if a number g is a
>generator, by taking the prime factors of p-1; if pow(g, (p-1)/factor,
>p)!=1 for all the factors, it's a generator.  Following on the above
>example, there are only two factors, 2 and p2:
>

not comment below...

>while (1):
>	g=<some random number>
>	if not (pow(g, 2,  p)==1 or <<--- this should be _and_, no?
>	        pow(g, p2, p)==1): 
>	    break
>

also, my books don't show a pow(a,b,c) but a pow(a,b). Shouldn't this be
modpow(a,b,c)?
I also can't find a modpow(a,b,c) either. Wait, is that part of mpz?

I really think a BigInteger class would help alot. Look at java's
BigIntger. You can
generate primes, and do all that fancy math stuff with it.

Below I've implemented the primes n and g in java. Am I interpeting your
code the
right way? I'm using Java-Linux JDK 1.1.3..

import java.math.BigInteger;
import java.util.Random;
import java.lang.Integer;

public class dh
{

	public BigInteger n;
	public BigInteger g;
	 
	public dh(int bits)
	{
		BigInteger one=new BigInteger("1");
		BigInteger two=new BigInteger("2");
		BigInteger prime;
		BigInteger sub_prime;
		BigInteger generator;
		
		while(true) {
			sub_prime=new BigInteger(bits-1,1,new Random()); // this generates a prime
			prime=sub_prime.multiply(two);
			prime=prime.add(one);
			
			if(prime.isProbablePrime(1)) {
				break;
			}
		}
		
		n=prime;
		
		while (true) {
        		generator=new BigInteger(8,1,new Random());  // this generates a
prime with 8 bits
			
		        if(!(generator.modPow(two,prime).equals(one)) && 
			   !(generator.modPow(sub_prime,prime).equals(one))) {
				break;
			}
		}
		 

		g=generator;
		
	}
		
	
	static public void main(String[] args) {
		
		Integer bits=new Integer(args[0]);
		
		dh myDH=new dh(bits.intValue());
		
		System.out.print("n is: ");
		System.out.println(myDH.n);
		System.out.println("n has " + myDH.n.bitLength() + " bits.");
		System.out.print("g is: ");
		System.out.println(myDH.g);
		System.out.println("g has " + myDH.g.bitLength() + " bits.");
 		
		System.exit(0);
	}
}


>Hmm... it doesn't look too difficult to produce a Diffie-Hellman class
>after all, though I can't imagine what its interface should look like.
>Do you have any ideas about that?  
>
>
>	Andrew Kuchling
>	amk@magnet.com
>	http://starship.skyport.net/crew/amk/
>
>
-----BEGIN PGP SIGNATURE-----
Version: PGP for Personal Privacy 5.0
Charset: noconv

iQCVAwUBNCNc+RxijdIqz8FNAQEUmQP+JAKEGpjo8n+wjiAlFY7ohopAbGetubz1
6QJyft9w4dZYbYAGV66bjIrrZu8oIVAwvCbKlCmThW14u90iMIndaMlJH29SPZ9m
mUyUJYRal8NH3QWBtpv6n7619r88ImnU1NxaSA2EQ1F6ZZwfIIb6YQsxFeR2w1id
3T+8Q0sWRn0=
=f6RN
-----END PGP SIGNATURE-----

----------------------------------------------
| Internet solutions for small companies     |
|                                            |
| email: Jeff_Macdonald@VirtualBuilder.com   |
| Web: www.VirtualBuilder.com                |
| PGP: www.VirtualBuilder.com/pgpkey.html    |
----------------------------------------------
			


1,,
Summary-line: 18-Aug         wiml@omnigroup.com [229] #PCT patches
Mail-from: From wiml@omnigroup.com  Mon Aug 18 19:15:33 1997
Return-Path: wiml@omnigroup.com
Received: from grommit.magnet.com (grommit-int.magnet.com [208.192.176.4]) by lemur.magnet.com  with SMTP id TAA01155 for <amk@magnet.com>; Mon, 18 Aug 1997 19:15:32 -0400 (EDT)
Received: by grommit.magnet.com (951211.SGI.8.6.12.PATCH1042/Magnet)
	for <amk@magnet.com> id TAA00517; Mon, 18 Aug 1997 19:00:44 -0400
Received: from ignem.omnigroup.com(198.151.161.40) by grommit.magnet.com via smap (3.1)
	id xma000511; Mon, 18 Aug 97 19:00:41 -0400
Received: from reason.omnigroup.com (reason [198.151.161.25])
	by ignem.omnigroup.com (8.8.5/8.8.5) with SMTP id QAA02952;
	Mon, 18 Aug 1997 16:00:39 -0700 (GMT-0700)
From: William Lewis <wiml@omnigroup.com>
Message-Id: <199708182300.QAA02952@ignem.omnigroup.com>
Received: by reason.omnigroup.com (NX5.67g/NX3.0X)
	id AA25820; Mon, 18 Aug 97 16:00:46 -0700
Date: Mon, 18 Aug 97 16:00:46 -0700
To: amk@magnet.com
Cc: wiml@hhhh.org
Subject: PCT patches

*** EOOH ***
Return-Path: wiml@omnigroup.com
From: William Lewis <wiml@omnigroup.com>
Date: Mon, 18 Aug 97 16:00:46 -0700
To: amk@magnet.com
Cc: wiml@hhhh.org
Subject: PCT patches

-----BEGIN PGP SIGNED MESSAGE-----

Here's a patch against PCT version 1.0.1. It allows DES3 to use
independent keys, fixes some bugs in the RSA module and the block
cipher framework, and adds a "mode" attribute to block cipher objects.

diff -rc pycrypt101.orig/Extensions/Crypto/Lib/RSA.py pycrypt101/Extensions/Crypto/Lib/RSA.py
*** pycrypt101.orig/Extensions/Crypto/Lib/RSA.py	Sun Apr 14 19:14:27 1996
- --- pycrypt101/Extensions/Crypto/Lib/RSA.py	Fri Aug  1 12:43:41 1997
***************
*** 12,18 ****
  import pubkey
  
  error = 'RSA module'
! keydata=['d', 'e', 'n']
  
  # Generate an RSA key with N bits
  def generate(N, randfunc, verbose=None):
- --- 12,18 ----
  import pubkey
  
  error = 'RSA module'
! keydata=['d', 'e', 'n', 'p', 'q']
  
  # Generate an RSA key with N bits
  def generate(N, randfunc, verbose=None):
***************
*** 42,48 ****
      if len(tuple) in [3,5] :
          obj.d=tuple[2]
      if len(tuple)==5:
!         obj.p=tuple[4] ; obj.q=tuple[5] 
      return obj
  
  class RSAobj(pubkey.pubkey):
- --- 42,48 ----
      if len(tuple) in [3,5] :
          obj.d=tuple[2]
      if len(tuple)==5:
!         obj.p=tuple[3] ; obj.q=tuple[4] 
      return obj
  
  class RSAobj(pubkey.pubkey):
Only in pycrypt101/Extensions/Crypto/Lib: RSA.py~
Only in pycrypt101/Extensions/Crypto/block: cast.c
Only in pycrypt101/Extensions/Crypto/block: cast5.c
Only in pycrypt101/Extensions/Crypto/block: casttest.py
diff -rc pycrypt101.orig/Extensions/Crypto/block/des3.c pycrypt101/Extensions/Crypto/block/des3.c
*** pycrypt101.orig/Extensions/Crypto/block/des3.c	Thu Dec 21 16:29:35 1995
- --- pycrypt101/Extensions/Crypto/block/des3.c	Mon Aug 18 15:56:37 1997
***************
*** 13,18 ****
- --- 13,19 ----
  /* des.c */
  /* Copyright (C) 1993 Eric Young */
  /* Integrated into the PCT by A.M. Kuchling, November 1994 */
+ /* Fully independet key mode added by Wim Lewis, July 1997 */
  
  typedef unsigned char des_cblock[8];
  
***************
*** 430,436 ****
  typedef struct 
  {
    PCTObject_HEAD
!   des_key_schedule KeySched1, KeySched2;
  } DES3object;
  
  static int des_encrypt(input,output,ks,encrypt)
- --- 431,437 ----
  typedef struct 
  {
    PCTObject_HEAD
!   des_key_schedule KeySched1, KeySched2, KeySched3;
  } DES3object;
  
  static int des_encrypt(input,output,ks,encrypt)
***************
*** 544,550 ****
  {
    des_cblock output, output2;
    
!   des_ecb_encrypt(block, output, self->KeySched1, 0);
    des_ecb_encrypt(output, output2, self->KeySched2, 1);
    des_ecb_encrypt(output2, block, self->KeySched1, 0);
  }
- --- 545,551 ----
  {
    des_cblock output, output2;
    
!   des_ecb_encrypt(block, output, self->KeySched3, 0);
    des_ecb_encrypt(output, output2, self->KeySched2, 1);
    des_ecb_encrypt(output2, block, self->KeySched1, 0);
  }
***************
*** 557,563 ****
    
    des_ecb_encrypt(block, output, self->KeySched1, 1);
    des_ecb_encrypt(output, output2, self->KeySched2, 0);
!   des_ecb_encrypt(output2, block, self->KeySched1, 1);
  }
  
  /* NOW DEFINED IN des_local.h
- --- 558,564 ----
    
    des_ecb_encrypt(block, output, self->KeySched1, 1);
    des_ecb_encrypt(output, output2, self->KeySched2, 0);
!   des_ecb_encrypt(output2, block, self->KeySched3, 1);
  }
  
  /* NOW DEFINED IN des_local.h
***************
*** 643,652 ****
  	return(0);
  	}
  
! static inline void DES3init(self, key)
       DES3object *self;
       unsigned char *key;
  {
    des_set_key(key+0, self->KeySched1);
    des_set_key(key+8, self->KeySched2);
  }
- --- 644,665 ----
  	return(0);
  	}
  
! static inline void DES3init(self, key, keylength)
       DES3object *self;
       unsigned char *key;
+      int keylength;
  {
+   if (keylength != 16 && keylength != 24) {
+     PyErr_SetString(PyExc_ValueError,
+ 		    "DES3 key must be either 16 or 24 bytes long");
+     return;
+   }
+ 
    des_set_key(key+0, self->KeySched1);
    des_set_key(key+8, self->KeySched2);
+   if (keylength == 24) {
+     des_set_key(key+16, self->KeySched3);
+   } else {
+     memcpy(self->KeySched3, self->KeySched1, sizeof(self->KeySched3));
+   }
  }
Only in pycrypt101/Extensions/Crypto/block: des3.c~
diff -rc pycrypt101.orig/Extensions/Crypto/config.pct pycrypt101/Extensions/Crypto/config.pct
*** pycrypt101.orig/Extensions/Crypto/config.pct	Tue Jan 30 17:24:24 1996
- --- pycrypt101/Extensions/Crypto/config.pct	Fri Aug  1 13:45:52 1997
***************
*** 15,24 ****
  block ARC2 8 0
  block Blowfish 8 0
  block DES 8 8
! block DES3 8 16
  block IDEA 8 16
  block RC5 8 0
  block Diamond 16 0
  
  # Stream ciphers
  stream ARC4 1 0
- --- 15,25 ----
  block ARC2 8 0
  block Blowfish 8 0
  block DES 8 8
! block DES3 8 0
  block IDEA 8 16
  block RC5 8 0
  block Diamond 16 0
  
  # Stream ciphers
  stream ARC4 1 0
Only in pycrypt101/Extensions/Crypto: config.pct~
diff -rc pycrypt101.orig/Extensions/Crypto/framewks/block.in pycrypt101/Extensions/Crypto/framewks/block.in
*** pycrypt101.orig/Extensions/Crypto/framewks/block.in	Thu Dec 21 16:28:55 1995
- --- pycrypt101/Extensions/Crypto/framewks/block.in	Mon Aug 18 15:45:59 1997
***************
*** 441,447 ****
  		      "@@BLOCKSIZE@@ bytes long");
        return -1;
      }
!   memcpy(self->IV, PyString_AsString, @@BLOCKSIZE@@);
    return (0);
  }
  
- --- 441,447 ----
  		      "@@BLOCKSIZE@@ bytes long");
        return -1;
      }
!   memcpy(self->IV, PyString_AsString(v), @@BLOCKSIZE@@);
    return (0);
  }
  
***************
*** 454,459 ****
- --- 454,463 ----
    if (strcmp(name, "IV") == 0) 
      {
        return(PyString_FromStringAndSize(self->IV, @@BLOCKSIZE@@));
+     }
+   if (strcmp(name, "mode") == 0)
+     {
+       return(PyInt_FromLong((long)(self->cipherMode)));
      }
   return Py_FindMethod(@@ALGORITHM@@methods, (PyObject *) self, name);
  }
Only in pycrypt101/Extensions/Crypto/framewks: block.in~



-----BEGIN PGP SIGNATURE-----
Version: 2.6.2
Comment: Processed by Mailcrypt 3.4, an Emacs/PGP interface

iQCVAwUBM/jT1F8UnN8n93LBAQGm1wP/Zqo3wKLiN1wa7eIUXSspn27UKM83dt1S
oJzl3HeHR+JNkOLTUdz37rkX4NbHVhr3wyuE/Hhi7C0LVG/kDfV3cpw2VYCyQgVK
b91ILoS5C8AgGwUm+mXKtEd73wt7hdOZTDsx0uboNb9c0PqEIzOB5SroNIEl9GLk
7D+C7KyyuYM=
=VPS6
-----END PGP SIGNATURE-----


1, answered,,
Summary-line: 15-Sep      JeffBauer@Bigfoot.com  [57] #pycrypt101 Makefile.pre.in diffs
Mail-from: From JeffBauer@Bigfoot.com  Mon Sep 15 17:07:06 1997
Return-Path: JeffBauer@Bigfoot.com
Received: from grommit.magnet.com (grommit-int.magnet.com [208.192.176.4]) by lemur.magnet.com  with SMTP id RAA01368 for <amk@magnet.com>; Mon, 15 Sep 1997 17:07:05 -0400 (EDT)
Received: by grommit.magnet.com (951211.SGI.8.6.12.PATCH1042/Magnet)
	for <amk@magnet.com> id RAA07289; Mon, 15 Sep 1997 17:07:04 -0400
Received: from sasha.pov.net(207.152.31.2) by grommit.magnet.com via smap (3.1)
	id xma007284; Mon, 15 Sep 97 17:06:41 -0400
Received: from jbauer.remote.pov.net (jbauer.remote.pov.net [207.152.31.187]) by sasha.pov.net (8.6.12/8.6.12) with SMTP id QAA08178 for <amk@magnet.com>; Mon, 15 Sep 1997 16:11:23 -0500
Received: by jbauer.remote.pov.net with Microsoft Mail
	id <01BCC1F1.8909C810@jbauer.remote.pov.net>; Mon, 15 Sep 1997 16:07:58 -0500
Message-ID: <01BCC1F1.8909C810@jbauer.remote.pov.net>
From: Jeff Bauer <JeffBauer@Bigfoot.com>
To: "'amk@magnet.com'" <amk@magnet.com>
Subject: pycrypt101 Makefile.pre.in diffs
Date: Mon, 15 Sep 1997 16:07:21 -0500
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit

*** EOOH ***
Return-Path: JeffBauer@Bigfoot.com
From: Jeff Bauer <JeffBauer@Bigfoot.com>
To: "'amk@magnet.com'" <amk@magnet.com>
Subject: pycrypt101 Makefile.pre.in diffs
Date: Mon, 15 Sep 1997 16:07:21 -0500
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit

Hi Andrew.

I finally got around to getting pycrypt101 to compile on my
Solaris 2.5.1 machine for Python 1.4.  FWIW, I've included
my Makefile.pre.in diffs.  Is there a precompiled version of
pycrypt/python available for NT?  I could look into doing the 
project myself, but U.S. export policies would make it an 
pointless exercise in wish fulfillment :(   <<-- meaning that I 
couldn't share my efforts with anyone.  Maybe I should 
plan a vacation to Australia and take my laptop along ...

Are you going to the 6th Python Workshop?

Best regards,

Jeff Bauer

_______________________________________________

diff Makefile.pre.in.origin Makefile.pre.in.sunos5
43a44,45
> VERSION=      1.4
> 
96,97c98,99
< CC=           @CC@ -I/usr/local/include
< SYSLIBS=      -L/usr/local/lib $(LIBM) $(LIBC) 
---
> CC=           @CC@ 
> SYSLIBS=      $(LIBM) $(LIBC) 
113,115c115,117
< INCLUDEPY=    $(installdir)/include/Py
< LIBP=         $(exec_installdir)/lib/python
< LIBPL=                $(LIBP)/lib
---
> INCLUDEPY=    $(prefix)/include/python$(VERSION)
> LIBP=         $(exec_prefix)/lib/python$(VERSION)
> LIBPL=                $(LIBP)/config


1,,
Summary-line: 15-Sep      JeffBauer@Bigfoot.com  [44] #RE: pycrypt101 Makefile.pre.in diffs
Mail-from: From JeffBauer@Bigfoot.com  Mon Sep 15 20:44:15 1997
Return-Path: JeffBauer@Bigfoot.com
Received: from grommit.magnet.com (grommit-int.magnet.com [208.192.176.4]) by lemur.magnet.com  with SMTP id UAA05975 for <amk@magnet.com>; Mon, 15 Sep 1997 20:44:14 -0400 (EDT)
Received: by grommit.magnet.com (951211.SGI.8.6.12.PATCH1042/Magnet)
	for <amk@magnet.com> id UAA09777; Mon, 15 Sep 1997 20:44:13 -0400
Received: from sasha.pov.net(207.152.31.2) by grommit.magnet.com via smap (3.1)
	id xma009773; Mon, 15 Sep 97 20:44:06 -0400
Received: from jbauer.remote.pov.net (jbauer.remote.pov.net [207.152.31.187]) by sasha.pov.net (8.6.12/8.6.12) with SMTP id TAA17127 for <amk@magnet.com>; Mon, 15 Sep 1997 19:49:01 -0500
Received: by jbauer.remote.pov.net with Microsoft Mail
	id <01BCC20F.D99CA130@jbauer.remote.pov.net>; Mon, 15 Sep 1997 19:44:59 -0500
Message-ID: <01BCC20F.D99CA130@jbauer.remote.pov.net>
From: Jeff Bauer <JeffBauer@Bigfoot.com>
To: "'Andrew Kuchling'" <amk@magnet.com>
Subject: RE: pycrypt101 Makefile.pre.in diffs
Date: Mon, 15 Sep 1997 19:42:16 -0500
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit

*** EOOH ***
Return-Path: JeffBauer@Bigfoot.com
From: Jeff Bauer <JeffBauer@Bigfoot.com>
To: "'Andrew Kuchling'" <amk@magnet.com>
Subject: RE: pycrypt101 Makefile.pre.in diffs
Date: Mon, 15 Sep 1997 19:42:16 -0500
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit


>>my Makefile.pre.in diffs.  Is there a precompiled version of
>>pycrypt/python available for NT?  I could look into doing the 
>>project myself, but U.S. export policies would make it an 

	>Not as far as I know.  
	
>>Are you going to the 6th Python Workshop?

	>Yes; you too?

Yep.

>	Thanks for the patches; I'll look at them later.  Actually, I
>think it's about time I returned to working on pycrypt, and would like
>to hear suggestions for new features.  Various people have sent me
>bugfixes which I haven't gotten around to examining yet, and someone
>submitted a CAST128 implementation (a block cipher algorithm,
>specified in an informational RFC somewhere).  Do you have any
>suggestions for new features?

Not really, except for NT support.  I know Mark Hammond is too busy
to consider it, but his locale would be ideal from a distribution angle.  
I have a Newton clinical application that will encrypt the data with IDEA 
and ship it to my Sun box via an internal modem connected to any ISP.
I presently have the C code working for IDEA, but it would be nice to 
have everything work natively in Python.  Interoperability with NT
would widen the circle of available systems, which is not so important
for this project, as it is for me to commit to this kind of security 
framework.

Best regards,

Jeff Bauer


1,,
Summary-line: 28-Jul              wiml@hhhh.org[1035] #Re: Python Cryptography Toolkit
Mail-from: From wiml@omnigroup.com  Mon Jul 28 18:55:29 1997
Return-Path: wiml@omnigroup.com
Received: from grommit.magnet.com (grommit-int.magnet.com [208.192.176.4]) by lemur.magnet.com  with SMTP id SAA02128 for <amk@magnet.com>; Mon, 28 Jul 1997 18:55:29 -0400 (EDT)
Received: by grommit.magnet.com (951211.SGI.8.6.12.PATCH1042/Magnet)
	for <amk@magnet.com> id SAA23549; Mon, 28 Jul 1997 18:55:28 -0400
Received: from ignem.omnigroup.com(198.151.161.40) by grommit.magnet.com via smap (3.1)
	id xma023544; Mon, 28 Jul 97 18:55:05 -0400
Received: from reason.omnigroup.com (reason [198.151.161.25])
	by ignem.omnigroup.com (8.8.5/8.8.5) with SMTP id PAA19358
	for <amk@magnet.com>; Mon, 28 Jul 1997 15:55:08 -0700 (GMT-0700)
Message-Id: <199707282255.PAA19358@ignem.omnigroup.com>
Received: by reason.omnigroup.com (NX5.67g/NX3.0X)
	id AA08245; Mon, 28 Jul 97 15:55:16 -0700
Date: Mon, 28 Jul 97 15:55:16 -0700
To: amk@magnet.com
Subject: Re: Python Cryptography Toolkit
From: wiml@hhhh.org
Reply-To: wiml@hhhh.org

*** EOOH ***
Return-Path: wiml@omnigroup.com
Date: Mon, 28 Jul 97 15:55:16 -0700
To: amk@magnet.com
Subject: Re: Python Cryptography Toolkit
From: wiml@hhhh.org
Reply-To: wiml@hhhh.org

-----BEGIN PGP SIGNED MESSAGE-----

You write:
> Unfortunately, I couldn't read your e-mail, since I retired that PGP
> key long ago; sorry!

It did look a little old :-) Mostly I just wanted to protect the code
from any evil whitespace-gobbling mailers it might encounter. 

What follows is an implementation of CAST (CAST-128, CAST5) as described
in rfc2144. It's not the fastest code ever written but it works.
There are some test vectors in casttest.py; if compiled with
- -DTEST the C code will perform the much more elaborate "Full Maintenance
Test". It should be reasonably portable.

I also wanted to say thanks for the PCT; it's a nicely designed and
useful adjunct to one of my favorite programming languages.

#! /bin/sh
# This is a shell archive, meaning:
# 1. Remove everything above the #! /bin/sh line.
# 2. Save the resulting text in a file.
# 3. Execute the file with /bin/sh (not csh) to create the files:
#	cast.c
#	cast5.c
#	casttest.py
# This archive created: Tue Jul 22 22:15:02 1997
export PATH; PATH=/bin:$PATH
echo shar: extracting "'cast.c'" '(11926 characters)'
if test -f 'cast.c'
then
	echo shar: will not over-write existing file "'cast.c'"
else
sed 's/^X//' << \SHAR_EOF > 'cast.c'
X/*
X   cast.c -- implementation of CAST-128 (aka CAST5) as described in RFC2144
X   
X   compile -DPCT for use in the Python Cryptography Toolkit
X       (this should work automatically)
X   compile -DTEST to include main() which performs the tests
X       specified in RFC2144
X
X   Written by Wim Lewis <wiml@hhhh.org> based entirely on RFC2144. This code
X   is in the public domain. Consult your local laws for possible restrictions
X   on use, distribution, and import/export. RFC2144 states that this
X   algorithm "is available worldwide on a royalty-free basis for commercial
X   and non-commercial uses".
X
X   This code is a pretty straightforward transliteration of the RFC into C.
X   It has not been optimized much at all: byte-order-independent arithmetic
X   operations are used where order-dependent pointer ops or unions might be
X   faster; the code could be rearranged to give the optimizer a better
X   chance to speed things up; etc.
X
X   This code requires a vaguely ANSI-ish compiler.
X
X   Tested with gcc 2.5.8 on i486, i586, i686, hp pa-risc, mc68040, sparc;
X   also with gcc 2.7.2 and (with minor changes) native Sun compiler on sparc
X
X   History:
X     21 Jul 1997: wiml     : first working version & Python module
X*/
X
X
X/* adjust these according to your compiler/platform. On some machines
X   uint32 will have to be a long. It's OK if uint32 is more than 32 bits. */
Xtypedef unsigned int uint32;
Xtypedef unsigned char uint8;
X
X#ifdef PCTObject_HEAD
X#define PCT
X#endif
X
X#ifdef PCT
X#define PCTstatic static
X#else
X#define PCTstatic
X#endif
X
X/* this struct probably belongs in cast.h */
Xtypedef struct {
X    /* masking and rotate keys */
X    uint32 Km[16];
X    uint8 Kr[16];
X    /* number of rounds (depends on original unpadded keylength) */
X    int rounds;
X} cast_keyschedule;
X
X/* these are the eight 32*256 S-boxes */
X#include "../block/cast5.c"
X
X/* fetch a uint32 from an array of uint8s (with a given offset) */
X#define fetch(ptr, base)   (((((( ptr[base]<< 8 ) | ptr[base+1] )<< 8 ) | ptr[base+2] )<< 8 ) | ptr[base+3])
X
X/* this is the round function f(D, Km, Kr) */
Xstatic inline uint32 castfunc(D, Kmi, Kri, type)
X     uint32 D, Kmi;
X     uint8 Kri;
X     int type;
X{
X    uint32 I, f;
X    short Ia, Ib, Ic, Id;
X    
X    switch(type) {
X      case 0:
X	I = (Kmi + D) ;
X	break;
X      case 1:
X	I = (Kmi ^ D) ;
X	break;
X      default:
X      case 2:
X	I = (Kmi - D) ;
X	break;
X    }
X    
X    I &= 0xFFFFFFFF;
X    I = ( I << Kri ) | ( I >> ( 32-Kri ) );
X    Ia = ( I >> 24 ) & 0xFF;
X    Ib = ( I >> 16 ) & 0xFF;
X    Ic = ( I >>  8 ) & 0xFF;
X    Id = ( I       ) & 0xFF;
X    
X    switch(type) {
X      case 0:
X	f = ((S1[Ia] ^ S2[Ib]) - S3[Ic]) + S4[Id];
X	break;
X      case 1:
X	f = ((S1[Ia] - S2[Ib]) + S3[Ic]) ^ S4[Id];
X	break;
X      default:
X      case 2:
X	f = ((S1[Ia] + S2[Ib]) ^ S3[Ic]) - S4[Id];
X	break;
X    }
X
X    return f;
X}
X
X/* encrypts/decrypts one block of data according to the key schedule
X   pointed to by `key'. Encrypts if decrypt=0, otherwise decrypts. */
XPCTstatic void castcrypt(key, block, decrypt)
X     cast_keyschedule *key;
X     uint8 *block;
X     int decrypt;
X{
X    uint32 L, R, tmp, f;
X    uint32 Kmi;
X    uint8  Kri;
X    short functype, round;
X    
X    L = fetch(block, 0);
X    R = fetch(block, 4);
X    
X/*  printf("L0 = %08x R0 = %08x\n", L, R); */
X
X    for(round = 0; round < key->rounds; round ++) {
X	
X	if (!decrypt) {
X	    Kmi = key->Km[round];
X	    Kri = key->Kr[round];
X	    functype = round % 3;
X	} else {
X	    Kmi = key->Km[(key->rounds) - round - 1];
X	    Kri = key->Kr[(key->rounds) - round - 1];
X	    functype = (((key->rounds) - round - 1) % 3);
X	}
X	
X	f = castfunc(R, Kmi, Kri, functype);
X	
X	tmp = L;
X	L = R;
X	R = tmp ^ f;
X
X/*	printf("L%d = %08x R%d = %08x\n", round+1, L, round+1, R); */
X    }
X    
X    block[0] = ( R & 0xFF000000 ) >> 24;
X    block[1] = ( R & 0x00FF0000 ) >> 16;
X    block[2] = ( R & 0x0000FF00 ) >> 8;
X    block[3] = ( R & 0x000000FF );
X    block[4] = ( L & 0xFF000000 ) >> 24;
X    block[5] = ( L & 0x00FF0000 ) >> 16;
X    block[6] = ( L & 0x0000FF00 ) >> 8;
X    block[7] = ( L & 0x000000FF );
X}
X
X/* fetch a uint8 from an array of uint32s */
X#define b(a,n) (((a)[n/4] >> (24-((n&3)*8))) & 0xFF)
X
X/* key schedule round functions */
X
X#define XZRound(T, F, ki1, ki2, ki3, ki4, \
X		si11, si12, si13, si14, si15,\
X		                        si25,\
X	                                si35,\
X	                                si45 ) \
X    T[0] = F[ki1] ^ S5[si11   ] ^ S6[si12  ] ^ S7[si13   ] ^ S8[si14  ] ^ S7[si15];\
X    T[1] = F[ki2] ^ S5[b(T, 0)] ^ S6[b(T,2)] ^ S7[b(T, 1)] ^ S8[b(T,3)] ^ S8[si25];\
X    T[2] = F[ki3] ^ S5[b(T, 7)] ^ S6[b(T,6)] ^ S7[b(T, 5)] ^ S8[b(T,4)] ^ S5[si35];\
X    T[3] = F[ki4] ^ S5[b(T,10)] ^ S6[b(T,9)] ^ S7[b(T,11)] ^ S8[b(T,8)] ^ S6[si45];
X
X#define zxround() XZRound(z, x, 0, 2, 3, 1, \
X			b(x,13), b(x,15), b(x,12), b(x,14),\
X			b(x, 8), b(x,10), b(x, 9), b(x,11))
X
X#define xzround() XZRound(x, z, 2, 0, 1, 3, \
X			b(z,5), b(z,7), b(z,4), b(z,6), \
X			b(z,0), b(z,2), b(z,1), b(z,3))
X
X#define Kround(T, base, F,\
X	       i11, i12, i13, i14, i15,\
X	       i21, i22, i23, i24, i25,\
X	       i31, i32, i33, i34, i35,\
X	       i41, i42, i43, i44, i45)\
X    T[base+0] = S5[b(F,i11)] ^ S6[b(F,i12)] ^ S7[b(F,i13)] ^ S8[b(F,i14)] ^ S5[b(F,i15)];\
X    T[base+1] = S5[b(F,i21)] ^ S6[b(F,i22)] ^ S7[b(F,i23)] ^ S8[b(F,i24)] ^ S6[b(F,i25)];\
X    T[base+2] = S5[b(F,i31)] ^ S6[b(F,i32)] ^ S7[b(F,i33)] ^ S8[b(F,i34)] ^ S7[b(F,i35)];\
X    T[base+3] = S5[b(F,i41)] ^ S6[b(F,i42)] ^ S7[b(F,i43)] ^ S8[b(F,i44)] ^ S8[b(F,i45)];
X
X/* generates sixteen 32-bit subkeys based on a 4x32-bit input key;
X   modifies the input key *in as well. */
Xstatic void schedulekeys_half(in, keys)
X     uint32 *in;
X     uint32 *keys;
X{
X    uint32 x[4], z[4];
X    
X    x[0] = in[0];
X    x[1] = in[1];
X    x[2] = in[2];
X    x[3] = in[3];
X    
X    zxround();
X    Kround(keys, 0, z,
X	    8,  9, 7, 6,  2,
X	   10, 11, 5, 4,  6,
X	   12, 13, 3, 2,  9,
X	   14, 15, 1, 0, 12);
X    xzround();
X    Kround(keys, 4, x,
X	    3,  2, 12, 13,  8,
X	    1,  0, 14, 15, 13,
X	    7,  6,  8,  9,  3,
X	    5,  4, 10, 11,  7);
X    zxround();
X    Kround(keys, 8, z,
X	    3,  2, 12, 13,  9,
X	    1,  0, 14, 15, 12,
X	    7,  6,  8,  9,  2,
X	    5,  4, 10, 11,  6);
X    xzround();
X    Kround(keys, 12, x,
X	    8,  9, 7, 6,  3,
X	   10, 11, 5, 4,  7,
X	   12, 13, 3, 2,  8,
X	   14, 15, 1, 0, 13);
X	   
X    in[0] = x[0];
X    in[1] = x[1];
X    in[2] = x[2];
X    in[3] = x[3];
X}
X
X/* generates a key schedule from an input key */
XPCTstatic void castschedulekeys(schedule, key, keybytes)
X     cast_keyschedule *schedule;
X     uint8 *key;
X     int keybytes;
X{
X    uint32 x[4];
X    uint8  paddedkey[16];
X    uint32 Kr_wide[16];
X    int i;
X    
X    for(i = 0; i < keybytes; i++)
X	paddedkey[i] = key[i];
X    for(     ; i < 16      ; i++)
X	paddedkey[i] = 0;
X    
X    if (keybytes <= 10)
X	schedule->rounds = 12;
X    else
X	schedule->rounds = 16;
X    
X    x[0] = fetch(paddedkey, 0);
X    x[1] = fetch(paddedkey, 4);
X    x[2] = fetch(paddedkey, 8);
X    x[3] = fetch(paddedkey, 12);
X    
X    schedulekeys_half(x, schedule->Km);
X    schedulekeys_half(x, Kr_wide);
X    
X    for(i = 0; i < 16; i ++) {
X	/* The Kr[] subkeys are used for 32-bit circular shifts,
X	   so we only need to keep them modulo 32 */
X	schedule->Kr[i] = (uint8)(Kr_wide[i] & 0x1F);
X    }
X}
X
X#ifdef TEST
X
X/* This performs a variety of encryptions and verifies that the results
X   match those specified in RFC2144 appendix B. Also verifies that
X   decryption restores the original data. */
X
X#include <stdio.h>
X
Xstatic cast_keyschedule sched;
X
Xvoid encrypt(key, keylen, in, out)
X     uint8 *key;
X     int keylen;
X     uint8 *in, *out;
X{
X    int i;
X    uint8 k[16];
X    
X    castschedulekeys(&sched, key, keylen);
X    
X    for(i = 0; i < 8; i++)
X	out[i] = in[i];
X    castcrypt(&sched, out, 0);
X}
X
Xvoid tst(key, keylen, data, result)
X     uint8 *key;
X     int keylen;
X     uint8 *data, *result;
X{
X    uint8 d[8];
X    int i;
X    
X    encrypt(key, keylen, data, d);
X    
X    for(i = 0; i < 8; i++)
X	if (d[i] != result[i])
X	    break;
X    
X    if (i == 8) {
X	printf("-- test ok (encrypt)\n");
X    } else {
X	for(i = 0; i < 8; i++)
X	    printf(" %02x", d[i]);
X	printf("   (computed)\n");
X	for(i = 0; i < 8; i++)
X	    printf(" %02x", result[i]);
X	printf("   (expected)\n");
X    }
X    
X    /* uses key schedule already set up */
X    castcrypt(&sched, d, 1);
X    if (bcmp(d, data, 8))
X	printf("   test FAILED (decrypt)\n");
X    else
X	printf("   test ok (decrypt)\n");
X    
X}
X
Xuint8 key[16] = { 0x01, 0x23, 0x45, 0x67, 0x12, 0x34, 0x56, 0x78,
X		  0x23, 0x45, 0x67, 0x89, 0x34, 0x56, 0x78, 0x9A };
Xuint8 data[8] = { 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF };
X
X/* expected results of encrypting the above with 128, 80, and 40
X   bits of key length */
Xuint8 out1[8] =  { 0x23, 0x8B, 0x4F, 0xE5, 0x84, 0x7E, 0x44, 0xB2 };
Xuint8 out2[8] =  { 0xEB, 0x6A, 0x71, 0x1A, 0x2C, 0x02, 0x27, 0x1B };
Xuint8 out3[8] =  { 0x7A, 0xC8, 0x16, 0xD1, 0x6E, 0x9B, 0x30, 0x2E };
X
X/* expected results of the "full maintenance test" */
Xuint8 afinal[16] = { 0xEE, 0xA9, 0xD0, 0xA2, 0x49, 0xFD, 0x3B, 0xA6,
X		     0xB3, 0x43, 0x6F, 0xB8, 0x9D, 0x6D, 0xCA, 0x92 };
Xuint8 bfinal[16] = { 0xB2, 0xC9, 0x5E, 0xB0, 0x0C, 0x31, 0xAD, 0x71,
X		     0x80, 0xAC, 0x05, 0xB8, 0xE8, 0x3D, 0x69, 0x6E };
X
Xmain()
X{
X    /* Appendix B.1 : Single Plaintext-Key-Ciphertext Sets */
X    tst(key, 16, data, out1);
X    tst(key, 10, data, out2);
X    tst(key,  5, data, out3);
X
X    /* Appendix B.2 : Full Maintenance Test */
X    {
X	uint8 abuf[16];
X	uint8 bbuf[16];
X	int i;
X
X	bcopy(key, abuf, 16);
X	bcopy(key, bbuf, 16);
X
X	printf("\nrunning full maintenance test...\n");
X
X	for(i = 0; i < 1000000; i++) {
X	    castschedulekeys(&sched, bbuf, 16);
X	    castcrypt(&sched, abuf, 0);
X	    castcrypt(&sched, abuf+8, 0);
X
X	    castschedulekeys(&sched, abuf, 16);
X	    castcrypt(&sched, bbuf, 0);
X	    castcrypt(&sched, bbuf+8, 0);
X
X	    if (!(i % 10000)) {
X		fprintf(stdout, "\r%d%%   ", i / 10000);
X		fflush(stdout);
X	    }
X	}
X
X	printf("\r        \r");
X
X	for(i = 0; i < 16; i ++)
X	    if (abuf[i] != afinal[i] || bbuf[i] != bfinal[i])
X		break;
X
X	if(i == 16) {
X	    printf("-- full maintenance test ok\n");
X	} else {
X	    for(i = 0; i < 16; i++)
X		printf(" %02x", abuf[i]);
X	    printf("\n");
X	    for(i = 0; i < 16; i++)
X		printf(" %02x", bbuf[i]);
X	    printf("\n");
X	}
X
X	printf("running maintenance test in reverse...\n");
X	for(i = 0; i < 1000000; i++) {
X	    castschedulekeys(&sched, abuf, 16);
X	    castcrypt(&sched, bbuf+8, 1);
X	    castcrypt(&sched, bbuf, 1);
X
X	    castschedulekeys(&sched, bbuf, 16);
X	    castcrypt(&sched, abuf+8, 1);
X	    castcrypt(&sched, abuf, 1);
X
X	    if (!(i % 10000)) {
X		fprintf(stdout, "\r%d%%   ", i / 10000);
X		fflush(stdout);
X	    }
X	}
X
X	printf("\r       \r");
X	if (bcmp(abuf, key, 16) || bcmp(bbuf, key, 16)) 
X	    printf("-- reverse maintenance test FAILED\n");
X	else
X	    printf("-- reverse maintenance test ok\n");
X    }
X}
X
X#endif
X
X#ifdef PCT
X
X/* code to interface with the Python Cryptography Toolkit */
X
Xtypedef struct 
X{
X    PCTObject_HEAD
X    cast_keyschedule schedule;
X} CASTobject;
X
Xstatic void
XCASTinit(self, key, keylength)
X     CASTobject *self;
X     unsigned char *key;
X     int keylength;
X{
X    /* presumably this will optimize out */
X    if (sizeof(uint32) < 4 || sizeof(uint8) != 1) {
X	PyErr_SetString(PyExc_SystemError,
X			"CAST module compiled with bad typedefs!");
X    }
X
X    /* make sure the key length is within bounds */
X    if (keylength < 5 || keylength > 16) {
X	PyErr_SetString(PyExc_ValueError, "CAST key must be "
X			"at least 5 bytes and no more than 16 bytes long");
X	return;
X    }
X
X    /* do the actual key schedule setup */
X    castschedulekeys(&(self->schedule), key, keylength);
X}
X
Xstatic void
XCASTencrypt(self, block)
X     CASTobject *self;
X     unsigned char *block;
X{
X    castcrypt(&(self->schedule), block, 0);
X}
X
Xstatic void CASTdecrypt(self, block)
X     CASTobject *self;
X     unsigned char *block;
X{
X    castcrypt(&(self->schedule), block, 1);
X}
X
X#endif
SHAR_EOF
if test 11926 -ne "`wc -c < 'cast.c'`"
then
	echo shar: error transmitting "'cast.c'" '(should have been 11926 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'cast5.c'" '(24921 characters)'
if test -f 'cast5.c'
then
	echo shar: will not over-write existing file "'cast5.c'"
else
sed 's/^X//' << \SHAR_EOF > 'cast5.c'
X/*
X   These are the S-boxes for CAST5 as given in RFC 2144.
X*/
X
X
Xstatic const uint32 S1[256] = {
X0x30fb40d4, 0x9fa0ff0b, 0x6beccd2f, 0x3f258c7a, 0x1e213f2f,
X0x9c004dd3, 0x6003e540, 0xcf9fc949, 0xbfd4af27, 0x88bbbdb5,
X0xe2034090, 0x98d09675, 0x6e63a0e0, 0x15c361d2, 0xc2e7661d,
X0x22d4ff8e, 0x28683b6f, 0xc07fd059, 0xff2379c8, 0x775f50e2,
X0x43c340d3, 0xdf2f8656, 0x887ca41a, 0xa2d2bd2d, 0xa1c9e0d6,
X0x346c4819, 0x61b76d87, 0x22540f2f, 0x2abe32e1, 0xaa54166b,
X0x22568e3a, 0xa2d341d0, 0x66db40c8, 0xa784392f, 0x004dff2f,
X0x2db9d2de, 0x97943fac, 0x4a97c1d8, 0x527644b7, 0xb5f437a7,
X0xb82cbaef, 0xd751d159, 0x6ff7f0ed, 0x5a097a1f, 0x827b68d0,
X0x90ecf52e, 0x22b0c054, 0xbc8e5935, 0x4b6d2f7f, 0x50bb64a2,
X0xd2664910, 0xbee5812d, 0xb7332290, 0xe93b159f, 0xb48ee411,
X0x4bff345d, 0xfd45c240, 0xad31973f, 0xc4f6d02e, 0x55fc8165,
X0xd5b1caad, 0xa1ac2dae, 0xa2d4b76d, 0xc19b0c50, 0x882240f2,
X0x0c6e4f38, 0xa4e4bfd7, 0x4f5ba272, 0x564c1d2f, 0xc59c5319,
X0xb949e354, 0xb04669fe, 0xb1b6ab8a, 0xc71358dd, 0x6385c545,
X0x110f935d, 0x57538ad5, 0x6a390493, 0xe63d37e0, 0x2a54f6b3,
X0x3a787d5f, 0x6276a0b5, 0x19a6fcdf, 0x7a42206a, 0x29f9d4d5,
X0xf61b1891, 0xbb72275e, 0xaa508167, 0x38901091, 0xc6b505eb,
X0x84c7cb8c, 0x2ad75a0f, 0x874a1427, 0xa2d1936b, 0x2ad286af,
X0xaa56d291, 0xd7894360, 0x425c750d, 0x93b39e26, 0x187184c9,
X0x6c00b32d, 0x73e2bb14, 0xa0bebc3c, 0x54623779, 0x64459eab,
X0x3f328b82, 0x7718cf82, 0x59a2cea6, 0x04ee002e, 0x89fe78e6,
X0x3fab0950, 0x325ff6c2, 0x81383f05, 0x6963c5c8, 0x76cb5ad6,
X0xd49974c9, 0xca180dcf, 0x380782d5, 0xc7fa5cf6, 0x8ac31511,
X0x35e79e13, 0x47da91d0, 0xf40f9086, 0xa7e2419e, 0x31366241,
X0x051ef495, 0xaa573b04, 0x4a805d8d, 0x548300d0, 0x00322a3c,
X0xbf64cddf, 0xba57a68e, 0x75c6372b, 0x50afd341, 0xa7c13275,
X0x915a0bf5, 0x6b54bfab, 0x2b0b1426, 0xab4cc9d7, 0x449ccd82,
X0xf7fbf265, 0xab85c5f3, 0x1b55db94, 0xaad4e324, 0xcfa4bd3f,
X0x2deaa3e2, 0x9e204d02, 0xc8bd25ac, 0xeadf55b3, 0xd5bd9e98,
X0xe31231b2, 0x2ad5ad6c, 0x954329de, 0xadbe4528, 0xd8710f69,
X0xaa51c90f, 0xaa786bf6, 0x22513f1e, 0xaa51a79b, 0x2ad344cc,
X0x7b5a41f0, 0xd37cfbad, 0x1b069505, 0x41ece491, 0xb4c332e6,
X0x032268d4, 0xc9600acc, 0xce387e6d, 0xbf6bb16c, 0x6a70fb78,
X0x0d03d9c9, 0xd4df39de, 0xe01063da, 0x4736f464, 0x5ad328d8,
X0xb347cc96, 0x75bb0fc3, 0x98511bfb, 0x4ffbcc35, 0xb58bcf6a,
X0xe11f0abc, 0xbfc5fe4a, 0xa70aec10, 0xac39570a, 0x3f04442f,
X0x6188b153, 0xe0397a2e, 0x5727cb79, 0x9ceb418f, 0x1cacd68d,
X0x2ad37c96, 0x0175cb9d, 0xc69dff09, 0xc75b65f0, 0xd9db40d8,
X0xec0e7779, 0x4744ead4, 0xb11c3274, 0xdd24cb9e, 0x7e1c54bd,
X0xf01144f9, 0xd2240eb1, 0x9675b3fd, 0xa3ac3755, 0xd47c27af,
X0x51c85f4d, 0x56907596, 0xa5bb15e6, 0x580304f0, 0xca042cf1,
X0x011a37ea, 0x8dbfaadb, 0x35ba3e4a, 0x3526ffa0, 0xc37b4d09,
X0xbc306ed9, 0x98a52666, 0x5648f725, 0xff5e569d, 0x0ced63d0,
X0x7c63b2cf, 0x700b45e1, 0xd5ea50f1, 0x85a92872, 0xaf1fbda7,
X0xd4234870, 0xa7870bf3, 0x2d3b4d79, 0x42e04198, 0x0cd0ede7,
X0x26470db8, 0xf881814c, 0x474d6ad7, 0x7c0c5e5c, 0xd1231959,
X0x381b7298, 0xf5d2f4db, 0xab838653, 0x6e2f1e23, 0x83719c9e,
X0xbd91e046, 0x9a56456e, 0xdc39200c, 0x20c8c571, 0x962bda1c,
X0xe1e696ff, 0xb141ab08, 0x7cca89b9, 0x1a69e783, 0x02cc4843,
X0xa2f7c579, 0x429ef47d, 0x427b169c, 0x5ac9f049, 0xdd8f0f00,
X0x5c8165bf };
X
Xstatic const uint32 S2[256] = {
X0x1f201094, 0xef0ba75b, 0x69e3cf7e, 0x393f4380, 0xfe61cf7a,
X0xeec5207a, 0x55889c94, 0x72fc0651, 0xada7ef79, 0x4e1d7235,
X0xd55a63ce, 0xde0436ba, 0x99c430ef, 0x5f0c0794, 0x18dcdb7d,
X0xa1d6eff3, 0xa0b52f7b, 0x59e83605, 0xee15b094, 0xe9ffd909,
X0xdc440086, 0xef944459, 0xba83ccb3, 0xe0c3cdfb, 0xd1da4181,
X0x3b092ab1, 0xf997f1c1, 0xa5e6cf7b, 0x01420ddb, 0xe4e7ef5b,
X0x25a1ff41, 0xe180f806, 0x1fc41080, 0x179bee7a, 0xd37ac6a9,
X0xfe5830a4, 0x98de8b7f, 0x77e83f4e, 0x79929269, 0x24fa9f7b,
X0xe113c85b, 0xacc40083, 0xd7503525, 0xf7ea615f, 0x62143154,
X0x0d554b63, 0x5d681121, 0xc866c359, 0x3d63cf73, 0xcee234c0,
X0xd4d87e87, 0x5c672b21, 0x071f6181, 0x39f7627f, 0x361e3084,
X0xe4eb573b, 0x602f64a4, 0xd63acd9c, 0x1bbc4635, 0x9e81032d,
X0x2701f50c, 0x99847ab4, 0xa0e3df79, 0xba6cf38c, 0x10843094,
X0x2537a95e, 0xf46f6ffe, 0xa1ff3b1f, 0x208cfb6a, 0x8f458c74,
X0xd9e0a227, 0x4ec73a34, 0xfc884f69, 0x3e4de8df, 0xef0e0088,
X0x3559648d, 0x8a45388c, 0x1d804366, 0x721d9bfd, 0xa58684bb,
X0xe8256333, 0x844e8212, 0x128d8098, 0xfed33fb4, 0xce280ae1,
X0x27e19ba5, 0xd5a6c252, 0xe49754bd, 0xc5d655dd, 0xeb667064,
X0x77840b4d, 0xa1b6a801, 0x84db26a9, 0xe0b56714, 0x21f043b7,
X0xe5d05860, 0x54f03084, 0x066ff472, 0xa31aa153, 0xdadc4755,
X0xb5625dbf, 0x68561be6, 0x83ca6b94, 0x2d6ed23b, 0xeccf01db,
X0xa6d3d0ba, 0xb6803d5c, 0xaf77a709, 0x33b4a34c, 0x397bc8d6,
X0x5ee22b95, 0x5f0e5304, 0x81ed6f61, 0x20e74364, 0xb45e1378,
X0xde18639b, 0x881ca122, 0xb96726d1, 0x8049a7e8, 0x22b7da7b,
X0x5e552d25, 0x5272d237, 0x79d2951c, 0xc60d894c, 0x488cb402,
X0x1ba4fe5b, 0xa4b09f6b, 0x1ca815cf, 0xa20c3005, 0x8871df63,
X0xb9de2fcb, 0x0cc6c9e9, 0x0beeff53, 0xe3214517, 0xb4542835,
X0x9f63293c, 0xee41e729, 0x6e1d2d7c, 0x50045286, 0x1e6685f3,
X0xf33401c6, 0x30a22c95, 0x31a70850, 0x60930f13, 0x73f98417,
X0xa1269859, 0xec645c44, 0x52c877a9, 0xcdff33a6, 0xa02b1741,
X0x7cbad9a2, 0x2180036f, 0x50d99c08, 0xcb3f4861, 0xc26bd765,
X0x64a3f6ab, 0x80342676, 0x25a75e7b, 0xe4e6d1fc, 0x20c710e6,
X0xcdf0b680, 0x17844d3b, 0x31eef84d, 0x7e0824e4, 0x2ccb49eb,
X0x846a3bae, 0x8ff77888, 0xee5d60f6, 0x7af75673, 0x2fdd5cdb,
X0xa11631c1, 0x30f66f43, 0xb3faec54, 0x157fd7fa, 0xef8579cc,
X0xd152de58, 0xdb2ffd5e, 0x8f32ce19, 0x306af97a, 0x02f03ef8,
X0x99319ad5, 0xc242fa0f, 0xa7e3ebb0, 0xc68e4906, 0xb8da230c,
X0x80823028, 0xdcdef3c8, 0xd35fb171, 0x088a1bc8, 0xbec0c560,
X0x61a3c9e8, 0xbca8f54d, 0xc72feffa, 0x22822e99, 0x82c570b4,
X0xd8d94e89, 0x8b1c34bc, 0x301e16e6, 0x273be979, 0xb0ffeaa6,
X0x61d9b8c6, 0x00b24869, 0xb7ffce3f, 0x08dc283b, 0x43daf65a,
X0xf7e19798, 0x7619b72f, 0x8f1c9ba4, 0xdc8637a0, 0x16a7d3b1,
X0x9fc393b7, 0xa7136eeb, 0xc6bcc63e, 0x1a513742, 0xef6828bc,
X0x520365d6, 0x2d6a77ab, 0x3527ed4b, 0x821fd216, 0x095c6e2e,
X0xdb92f2fb, 0x5eea29cb, 0x145892f5, 0x91584f7f, 0x5483697b,
X0x2667a8cc, 0x85196048, 0x8c4bacea, 0x833860d4, 0x0d23e0f9,
X0x6c387e8a, 0x0ae6d249, 0xb284600c, 0xd835731d, 0xdcb1c647,
X0xac4c56ea, 0x3ebd81b3, 0x230eabb0, 0x6438bc87, 0xf0b5b1fa,
X0x8f5ea2b3, 0xfc184642, 0x0a036b7a, 0x4fb089bd, 0x649da589,
X0xa345415e, 0x5c038323, 0x3e5d3bb9, 0x43d79572, 0x7e6dd07c,
X0x06dfdf1e, 0x6c6cc4ef, 0x7160a539, 0x73bfbe70, 0x83877605,
X0x4523ecf1 };
X
Xstatic const uint32 S3[256] = {
X0x8defc240, 0x25fa5d9f, 0xeb903dbf, 0xe810c907, 0x47607fff,
X0x369fe44b, 0x8c1fc644, 0xaececa90, 0xbeb1f9bf, 0xeefbcaea,
X0xe8cf1950, 0x51df07ae, 0x920e8806, 0xf0ad0548, 0xe13c8d83,
X0x927010d5, 0x11107d9f, 0x07647db9, 0xb2e3e4d4, 0x3d4f285e,
X0xb9afa820, 0xfade82e0, 0xa067268b, 0x8272792e, 0x553fb2c0,
X0x489ae22b, 0xd4ef9794, 0x125e3fbc, 0x21fffcee, 0x825b1bfd,
X0x9255c5ed, 0x1257a240, 0x4e1a8302, 0xbae07fff, 0x528246e7,
X0x8e57140e, 0x3373f7bf, 0x8c9f8188, 0xa6fc4ee8, 0xc982b5a5,
X0xa8c01db7, 0x579fc264, 0x67094f31, 0xf2bd3f5f, 0x40fff7c1,
X0x1fb78dfc, 0x8e6bd2c1, 0x437be59b, 0x99b03dbf, 0xb5dbc64b,
X0x638dc0e6, 0x55819d99, 0xa197c81c, 0x4a012d6e, 0xc5884a28,
X0xccc36f71, 0xb843c213, 0x6c0743f1, 0x8309893c, 0x0feddd5f,
X0x2f7fe850, 0xd7c07f7e, 0x02507fbf, 0x5afb9a04, 0xa747d2d0,
X0x1651192e, 0xaf70bf3e, 0x58c31380, 0x5f98302e, 0x727cc3c4,
X0x0a0fb402, 0x0f7fef82, 0x8c96fdad, 0x5d2c2aae, 0x8ee99a49,
X0x50da88b8, 0x8427f4a0, 0x1eac5790, 0x796fb449, 0x8252dc15,
X0xefbd7d9b, 0xa672597d, 0xada840d8, 0x45f54504, 0xfa5d7403,
X0xe83ec305, 0x4f91751a, 0x925669c2, 0x23efe941, 0xa903f12e,
X0x60270df2, 0x0276e4b6, 0x94fd6574, 0x927985b2, 0x8276dbcb,
X0x02778176, 0xf8af918d, 0x4e48f79e, 0x8f616ddf, 0xe29d840e,
X0x842f7d83, 0x340ce5c8, 0x96bbb682, 0x93b4b148, 0xef303cab,
X0x984faf28, 0x779faf9b, 0x92dc560d, 0x224d1e20, 0x8437aa88,
X0x7d29dc96, 0x2756d3dc, 0x8b907cee, 0xb51fd240, 0xe7c07ce3,
X0xe566b4a1, 0xc3e9615e, 0x3cf8209d, 0x6094d1e3, 0xcd9ca341,
X0x5c76460e, 0x00ea983b, 0xd4d67881, 0xfd47572c, 0xf76cedd9,
X0xbda8229c, 0x127dadaa, 0x438a074e, 0x1f97c090, 0x081bdb8a,
X0x93a07ebe, 0xb938ca15, 0x97b03cff, 0x3dc2c0f8, 0x8d1ab2ec,
X0x64380e51, 0x68cc7bfb, 0xd90f2788, 0x12490181, 0x5de5ffd4,
X0xdd7ef86a, 0x76a2e214, 0xb9a40368, 0x925d958f, 0x4b39fffa,
X0xba39aee9, 0xa4ffd30b, 0xfaf7933b, 0x6d498623, 0x193cbcfa,
X0x27627545, 0x825cf47a, 0x61bd8ba0, 0xd11e42d1, 0xcead04f4,
X0x127ea392, 0x10428db7, 0x8272a972, 0x9270c4a8, 0x127de50b,
X0x285ba1c8, 0x3c62f44f, 0x35c0eaa5, 0xe805d231, 0x428929fb,
X0xb4fcdf82, 0x4fb66a53, 0x0e7dc15b, 0x1f081fab, 0x108618ae,
X0xfcfd086d, 0xf9ff2889, 0x694bcc11, 0x236a5cae, 0x12deca4d,
X0x2c3f8cc5, 0xd2d02dfe, 0xf8ef5896, 0xe4cf52da, 0x95155b67,
X0x494a488c, 0xb9b6a80c, 0x5c8f82bc, 0x89d36b45, 0x3a609437,
X0xec00c9a9, 0x44715253, 0x0a874b49, 0xd773bc40, 0x7c34671c,
X0x02717ef6, 0x4feb5536, 0xa2d02fff, 0xd2bf60c4, 0xd43f03c0,
X0x50b4ef6d, 0x07478cd1, 0x006e1888, 0xa2e53f55, 0xb9e6d4bc,
X0xa2048016, 0x97573833, 0xd7207d67, 0xde0f8f3d, 0x72f87b33,
X0xabcc4f33, 0x7688c55d, 0x7b00a6b0, 0x947b0001, 0x570075d2,
X0xf9bb88f8, 0x8942019e, 0x4264a5ff, 0x856302e0, 0x72dbd92b,
X0xee971b69, 0x6ea22fde, 0x5f08ae2b, 0xaf7a616d, 0xe5c98767,
X0xcf1febd2, 0x61efc8c2, 0xf1ac2571, 0xcc8239c2, 0x67214cb8,
X0xb1e583d1, 0xb7dc3e62, 0x7f10bdce, 0xf90a5c38, 0x0ff0443d,
X0x606e6dc6, 0x60543a49, 0x5727c148, 0x2be98a1d, 0x8ab41738,
X0x20e1be24, 0xaf96da0f, 0x68458425, 0x99833be5, 0x600d457d,
X0x282f9350, 0x8334b362, 0xd91d1120, 0x2b6d8da0, 0x642b1e31,
X0x9c305a00, 0x52bce688, 0x1b03588a, 0xf7baefd5, 0x4142ed9c,
X0xa4315c11, 0x83323ec5, 0xdfef4636, 0xa133c501, 0xe9d3531c,
X0xee353783 };
X
Xstatic const uint32 S4[256] = {
X0x9db30420, 0x1fb6e9de, 0xa7be7bef, 0xd273a298, 0x4a4f7bdb,
X0x64ad8c57, 0x85510443, 0xfa020ed1, 0x7e287aff, 0xe60fb663,
X0x095f35a1, 0x79ebf120, 0xfd059d43, 0x6497b7b1, 0xf3641f63,
X0x241e4adf, 0x28147f5f, 0x4fa2b8cd, 0xc9430040, 0x0cc32220,
X0xfdd30b30, 0xc0a5374f, 0x1d2d00d9, 0x24147b15, 0xee4d111a,
X0x0fca5167, 0x71ff904c, 0x2d195ffe, 0x1a05645f, 0x0c13fefe,
X0x081b08ca, 0x05170121, 0x80530100, 0xe83e5efe, 0xac9af4f8,
X0x7fe72701, 0xd2b8ee5f, 0x06df4261, 0xbb9e9b8a, 0x7293ea25,
X0xce84ffdf, 0xf5718801, 0x3dd64b04, 0xa26f263b, 0x7ed48400,
X0x547eebe6, 0x446d4ca0, 0x6cf3d6f5, 0x2649abdf, 0xaea0c7f5,
X0x36338cc1, 0x503f7e93, 0xd3772061, 0x11b638e1, 0x72500e03,
X0xf80eb2bb, 0xabe0502e, 0xec8d77de, 0x57971e81, 0xe14f6746,
X0xc9335400, 0x6920318f, 0x081dbb99, 0xffc304a5, 0x4d351805,
X0x7f3d5ce3, 0xa6c866c6, 0x5d5bcca9, 0xdaec6fea, 0x9f926f91,
X0x9f46222f, 0x3991467d, 0xa5bf6d8e, 0x1143c44f, 0x43958302,
X0xd0214eeb, 0x022083b8, 0x3fb6180c, 0x18f8931e, 0x281658e6,
X0x26486e3e, 0x8bd78a70, 0x7477e4c1, 0xb506e07c, 0xf32d0a25,
X0x79098b02, 0xe4eabb81, 0x28123b23, 0x69dead38, 0x1574ca16,
X0xdf871b62, 0x211c40b7, 0xa51a9ef9, 0x0014377b, 0x041e8ac8,
X0x09114003, 0xbd59e4d2, 0xe3d156d5, 0x4fe876d5, 0x2f91a340,
X0x557be8de, 0x00eae4a7, 0x0ce5c2ec, 0x4db4bba6, 0xe756bdff,
X0xdd3369ac, 0xec17b035, 0x06572327, 0x99afc8b0, 0x56c8c391,
X0x6b65811c, 0x5e146119, 0x6e85cb75, 0xbe07c002, 0xc2325577,
X0x893ff4ec, 0x5bbfc92d, 0xd0ec3b25, 0xb7801ab7, 0x8d6d3b24,
X0x20c763ef, 0xc366a5fc, 0x9c382880, 0x0ace3205, 0xaac9548a,
X0xeca1d7c7, 0x041afa32, 0x1d16625a, 0x6701902c, 0x9b757a54,
X0x31d477f7, 0x9126b031, 0x36cc6fdb, 0xc70b8b46, 0xd9e66a48,
X0x56e55a79, 0x026a4ceb, 0x52437eff, 0x2f8f76b4, 0x0df980a5,
X0x8674cde3, 0xedda04eb, 0x17a9be04, 0x2c18f4df, 0xb7747f9d,
X0xab2af7b4, 0xefc34d20, 0x2e096b7c, 0x1741a254, 0xe5b6a035,
X0x213d42f6, 0x2c1c7c26, 0x61c2f50f, 0x6552daf9, 0xd2c231f8,
X0x25130f69, 0xd8167fa2, 0x0418f2c8, 0x001a96a6, 0x0d1526ab,
X0x63315c21, 0x5e0a72ec, 0x49bafefd, 0x187908d9, 0x8d0dbd86,
X0x311170a7, 0x3e9b640c, 0xcc3e10d7, 0xd5cad3b6, 0x0caec388,
X0xf73001e1, 0x6c728aff, 0x71eae2a1, 0x1f9af36e, 0xcfcbd12f,
X0xc1de8417, 0xac07be6b, 0xcb44a1d8, 0x8b9b0f56, 0x013988c3,
X0xb1c52fca, 0xb4be31cd, 0xd8782806, 0x12a3a4e2, 0x6f7de532,
X0x58fd7eb6, 0xd01ee900, 0x24adffc2, 0xf4990fc5, 0x9711aac5,
X0x001d7b95, 0x82e5e7d2, 0x109873f6, 0x00613096, 0xc32d9521,
X0xada121ff, 0x29908415, 0x7fbb977f, 0xaf9eb3db, 0x29c9ed2a,
X0x5ce2a465, 0xa730f32c, 0xd0aa3fe8, 0x8a5cc091, 0xd49e2ce7,
X0x0ce454a9, 0xd60acd86, 0x015f1919, 0x77079103, 0xdea03af6,
X0x78a8565e, 0xdee356df, 0x21f05cbe, 0x8b75e387, 0xb3c50651,
X0xb8a5c3ef, 0xd8eeb6d2, 0xe523be77, 0xc2154529, 0x2f69efdf,
X0xafe67afb, 0xf470c4b2, 0xf3e0eb5b, 0xd6cc9876, 0x39e4460c,
X0x1fda8538, 0x1987832f, 0xca007367, 0xa99144f8, 0x296b299e,
X0x492fc295, 0x9266beab, 0xb5676e69, 0x9bd3ddda, 0xdf7e052f,
X0xdb25701c, 0x1b5e51ee, 0xf65324e6, 0x6afce36c, 0x0316cc04,
X0x8644213e, 0xb7dc59d0, 0x7965291f, 0xccd6fd43, 0x41823979,
X0x932bcdf6, 0xb657c34d, 0x4edfd282, 0x7ae5290c, 0x3cb9536b,
X0x851e20fe, 0x9833557e, 0x13ecf0b0, 0xd3ffb372, 0x3f85c5c1,
X0x0aef7ed2 };
X
Xstatic const uint32 S5[256] = {
X0x7ec90c04, 0x2c6e74b9, 0x9b0e66df, 0xa6337911, 0xb86a7fff,
X0x1dd358f5, 0x44dd9d44, 0x1731167f, 0x08fbf1fa, 0xe7f511cc,
X0xd2051b00, 0x735aba00, 0x2ab722d8, 0x386381cb, 0xacf6243a,
X0x69befd7a, 0xe6a2e77f, 0xf0c720cd, 0xc4494816, 0xccf5c180,
X0x38851640, 0x15b0a848, 0xe68b18cb, 0x4caadeff, 0x5f480a01,
X0x0412b2aa, 0x259814fc, 0x41d0efe2, 0x4e40b48d, 0x248eb6fb,
X0x8dba1cfe, 0x41a99b02, 0x1a550a04, 0xba8f65cb, 0x7251f4e7,
X0x95a51725, 0xc106ecd7, 0x97a5980a, 0xc539b9aa, 0x4d79fe6a,
X0xf2f3f763, 0x68af8040, 0xed0c9e56, 0x11b4958b, 0xe1eb5a88,
X0x8709e6b0, 0xd7e07156, 0x4e29fea7, 0x6366e52d, 0x02d1c000,
X0xc4ac8e05, 0x9377f571, 0x0c05372a, 0x578535f2, 0x2261be02,
X0xd642a0c9, 0xdf13a280, 0x74b55bd2, 0x682199c0, 0xd421e5ec,
X0x53fb3ce8, 0xc8adedb3, 0x28a87fc9, 0x3d959981, 0x5c1ff900,
X0xfe38d399, 0x0c4eff0b, 0x062407ea, 0xaa2f4fb1, 0x4fb96976,
X0x90c79505, 0xb0a8a774, 0xef55a1ff, 0xe59ca2c2, 0xa6b62d27,
X0xe66a4263, 0xdf65001f, 0x0ec50966, 0xdfdd55bc, 0x29de0655,
X0x911e739a, 0x17af8975, 0x32c7911c, 0x89f89468, 0x0d01e980,
X0x524755f4, 0x03b63cc9, 0x0cc844b2, 0xbcf3f0aa, 0x87ac36e9,
X0xe53a7426, 0x01b3d82b, 0x1a9e7449, 0x64ee2d7e, 0xcddbb1da,
X0x01c94910, 0xb868bf80, 0x0d26f3fd, 0x9342ede7, 0x04a5c284,
X0x636737b6, 0x50f5b616, 0xf24766e3, 0x8eca36c1, 0x136e05db,
X0xfef18391, 0xfb887a37, 0xd6e7f7d4, 0xc7fb7dc9, 0x3063fcdf,
X0xb6f589de, 0xec2941da, 0x26e46695, 0xb7566419, 0xf654efc5,
X0xd08d58b7, 0x48925401, 0xc1bacb7f, 0xe5ff550f, 0xb6083049,
X0x5bb5d0e8, 0x87d72e5a, 0xab6a6ee1, 0x223a66ce, 0xc62bf3cd,
X0x9e0885f9, 0x68cb3e47, 0x086c010f, 0xa21de820, 0xd18b69de,
X0xf3f65777, 0xfa02c3f6, 0x407edac3, 0xcbb3d550, 0x1793084d,
X0xb0d70eba, 0x0ab378d5, 0xd951fb0c, 0xded7da56, 0x4124bbe4,
X0x94ca0b56, 0x0f5755d1, 0xe0e1e56e, 0x6184b5be, 0x580a249f,
X0x94f74bc0, 0xe327888e, 0x9f7b5561, 0xc3dc0280, 0x05687715,
X0x646c6bd7, 0x44904db3, 0x66b4f0a3, 0xc0f1648a, 0x697ed5af,
X0x49e92ff6, 0x309e374f, 0x2cb6356a, 0x85808573, 0x4991f840,
X0x76f0ae02, 0x083be84d, 0x28421c9a, 0x44489406, 0x736e4cb8,
X0xc1092910, 0x8bc95fc6, 0x7d869cf4, 0x134f616f, 0x2e77118d,
X0xb31b2be1, 0xaa90b472, 0x3ca5d717, 0x7d161bba, 0x9cad9010,
X0xaf462ba2, 0x9fe459d2, 0x45d34559, 0xd9f2da13, 0xdbc65487,
X0xf3e4f94e, 0x176d486f, 0x097c13ea, 0x631da5c7, 0x445f7382,
X0x175683f4, 0xcdc66a97, 0x70be0288, 0xb3cdcf72, 0x6e5dd2f3,
X0x20936079, 0x459b80a5, 0xbe60e2db, 0xa9c23101, 0xeba5315c,
X0x224e42f2, 0x1c5c1572, 0xf6721b2c, 0x1ad2fff3, 0x8c25404e,
X0x324ed72f, 0x4067b7fd, 0x0523138e, 0x5ca3bc78, 0xdc0fd66e,
X0x75922283, 0x784d6b17, 0x58ebb16e, 0x44094f85, 0x3f481d87,
X0xfcfeae7b, 0x77b5ff76, 0x8c2302bf, 0xaaf47556, 0x5f46b02a,
X0x2b092801, 0x3d38f5f7, 0x0ca81f36, 0x52af4a8a, 0x66d5e7c0,
X0xdf3b0874, 0x95055110, 0x1b5ad7a8, 0xf61ed5ad, 0x6cf6e479,
X0x20758184, 0xd0cefa65, 0x88f7be58, 0x4a046826, 0x0ff6f8f3,
X0xa09c7f70, 0x5346aba0, 0x5ce96c28, 0xe176eda3, 0x6bac307f,
X0x376829d2, 0x85360fa9, 0x17e3fe2a, 0x24b79767, 0xf5a96b20,
X0xd6cd2595, 0x68ff1ebf, 0x7555442c, 0xf19f06be, 0xf9e0659a,
X0xeeb9491d, 0x34010718, 0xbb30cab8, 0xe822fe15, 0x88570983,
X0x750e6249, 0xda627e55, 0x5e76ffa8, 0xb1534546, 0x6d47de08,
X0xefe9e7d4 };
X
Xstatic const uint32 S6[256] = {
X0xf6fa8f9d, 0x2cac6ce1, 0x4ca34867, 0xe2337f7c, 0x95db08e7,
X0x016843b4, 0xeced5cbc, 0x325553ac, 0xbf9f0960, 0xdfa1e2ed,
X0x83f0579d, 0x63ed86b9, 0x1ab6a6b8, 0xde5ebe39, 0xf38ff732,
X0x8989b138, 0x33f14961, 0xc01937bd, 0xf506c6da, 0xe4625e7e,
X0xa308ea99, 0x4e23e33c, 0x79cbd7cc, 0x48a14367, 0xa3149619,
X0xfec94bd5, 0xa114174a, 0xeaa01866, 0xa084db2d, 0x09a8486f,
X0xa888614a, 0x2900af98, 0x01665991, 0xe1992863, 0xc8f30c60,
X0x2e78ef3c, 0xd0d51932, 0xcf0fec14, 0xf7ca07d2, 0xd0a82072,
X0xfd41197e, 0x9305a6b0, 0xe86be3da, 0x74bed3cd, 0x372da53c,
X0x4c7f4448, 0xdab5d440, 0x6dba0ec3, 0x083919a7, 0x9fbaeed9,
X0x49dbcfb0, 0x4e670c53, 0x5c3d9c01, 0x64bdb941, 0x2c0e636a,
X0xba7dd9cd, 0xea6f7388, 0xe70bc762, 0x35f29adb, 0x5c4cdd8d,
X0xf0d48d8c, 0xb88153e2, 0x08a19866, 0x1ae2eac8, 0x284caf89,
X0xaa928223, 0x9334be53, 0x3b3a21bf, 0x16434be3, 0x9aea3906,
X0xefe8c36e, 0xf890cdd9, 0x80226dae, 0xc340a4a3, 0xdf7e9c09,
X0xa694a807, 0x5b7c5ecc, 0x221db3a6, 0x9a69a02f, 0x68818a54,
X0xceb2296f, 0x53c0843a, 0xfe893655, 0x25bfe68a, 0xb4628abc,
X0xcf222ebf, 0x25ac6f48, 0xa9a99387, 0x53bddb65, 0xe76ffbe7,
X0xe967fd78, 0x0ba93563, 0x8e342bc1, 0xe8a11be9, 0x4980740d,
X0xc8087dfc, 0x8de4bf99, 0xa11101a0, 0x7fd37975, 0xda5a26c0,
X0xe81f994f, 0x9528cd89, 0xfd339fed, 0xb87834bf, 0x5f04456d,
X0x22258698, 0xc9c4c83b, 0x2dc156be, 0x4f628daa, 0x57f55ec5,
X0xe2220abe, 0xd2916ebf, 0x4ec75b95, 0x24f2c3c0, 0x42d15d99,
X0xcd0d7fa0, 0x7b6e27ff, 0xa8dc8af0, 0x7345c106, 0xf41e232f,
X0x35162386, 0xe6ea8926, 0x3333b094, 0x157ec6f2, 0x372b74af,
X0x692573e4, 0xe9a9d848, 0xf3160289, 0x3a62ef1d, 0xa787e238,
X0xf3a5f676, 0x74364853, 0x20951063, 0x4576698d, 0xb6fad407,
X0x592af950, 0x36f73523, 0x4cfb6e87, 0x7da4cec0, 0x6c152daa,
X0xcb0396a8, 0xc50dfe5d, 0xfcd707ab, 0x0921c42f, 0x89dff0bb,
X0x5fe2be78, 0x448f4f33, 0x754613c9, 0x2b05d08d, 0x48b9d585,
X0xdc049441, 0xc8098f9b, 0x7dede786, 0xc39a3373, 0x42410005,
X0x6a091751, 0x0ef3c8a6, 0x890072d6, 0x28207682, 0xa9a9f7be,
X0xbf32679d, 0xd45b5b75, 0xb353fd00, 0xcbb0e358, 0x830f220a,
X0x1f8fb214, 0xd372cf08, 0xcc3c4a13, 0x8cf63166, 0x061c87be,
X0x88c98f88, 0x6062e397, 0x47cf8e7a, 0xb6c85283, 0x3cc2acfb,
X0x3fc06976, 0x4e8f0252, 0x64d8314d, 0xda3870e3, 0x1e665459,
X0xc10908f0, 0x513021a5, 0x6c5b68b7, 0x822f8aa0, 0x3007cd3e,
X0x74719eef, 0xdc872681, 0x073340d4, 0x7e432fd9, 0x0c5ec241,
X0x8809286c, 0xf592d891, 0x08a930f6, 0x957ef305, 0xb7fbffbd,
X0xc266e96f, 0x6fe4ac98, 0xb173ecc0, 0xbc60b42a, 0x953498da,
X0xfba1ae12, 0x2d4bd736, 0x0f25faab, 0xa4f3fceb, 0xe2969123,
X0x257f0c3d, 0x9348af49, 0x361400bc, 0xe8816f4a, 0x3814f200,
X0xa3f94043, 0x9c7a54c2, 0xbc704f57, 0xda41e7f9, 0xc25ad33a,
X0x54f4a084, 0xb17f5505, 0x59357cbe, 0xedbd15c8, 0x7f97c5ab,
X0xba5ac7b5, 0xb6f6deaf, 0x3a479c3a, 0x5302da25, 0x653d7e6a,
X0x54268d49, 0x51a477ea, 0x5017d55b, 0xd7d25d88, 0x44136c76,
X0x0404a8c8, 0xb8e5a121, 0xb81a928a, 0x60ed5869, 0x97c55b96,
X0xeaec991b, 0x29935913, 0x01fdb7f1, 0x088e8dfa, 0x9ab6f6f5,
X0x3b4cbf9f, 0x4a5de3ab, 0xe6051d35, 0xa0e1d855, 0xd36b4cf1,
X0xf544edeb, 0xb0e93524, 0xbebb8fbd, 0xa2d762cf, 0x49c92f54,
X0x38b5f331, 0x7128a454, 0x48392905, 0xa65b1db8, 0x851c97bd,
X0xd675cf2f };
X
Xstatic const uint32 S7[256] = {
X0x85e04019, 0x332bf567, 0x662dbfff, 0xcfc65693, 0x2a8d7f6f,
X0xab9bc912, 0xde6008a1, 0x2028da1f, 0x0227bce7, 0x4d642916,
X0x18fac300, 0x50f18b82, 0x2cb2cb11, 0xb232e75c, 0x4b3695f2,
X0xb28707de, 0xa05fbcf6, 0xcd4181e9, 0xe150210c, 0xe24ef1bd,
X0xb168c381, 0xfde4e789, 0x5c79b0d8, 0x1e8bfd43, 0x4d495001,
X0x38be4341, 0x913cee1d, 0x92a79c3f, 0x089766be, 0xbaeeadf4,
X0x1286becf, 0xb6eacb19, 0x2660c200, 0x7565bde4, 0x64241f7a,
X0x8248dca9, 0xc3b3ad66, 0x28136086, 0x0bd8dfa8, 0x356d1cf2,
X0x107789be, 0xb3b2e9ce, 0x0502aa8f, 0x0bc0351e, 0x166bf52a,
X0xeb12ff82, 0xe3486911, 0xd34d7516, 0x4e7b3aff, 0x5f43671b,
X0x9cf6e037, 0x4981ac83, 0x334266ce, 0x8c9341b7, 0xd0d854c0,
X0xcb3a6c88, 0x47bc2829, 0x4725ba37, 0xa66ad22b, 0x7ad61f1e,
X0x0c5cbafa, 0x4437f107, 0xb6e79962, 0x42d2d816, 0x0a961288,
X0xe1a5c06e, 0x13749e67, 0x72fc081a, 0xb1d139f7, 0xf9583745,
X0xcf19df58, 0xbec3f756, 0xc06eba30, 0x07211b24, 0x45c28829,
X0xc95e317f, 0xbc8ec511, 0x38bc46e9, 0xc6e6fa14, 0xbae8584a,
X0xad4ebc46, 0x468f508b, 0x7829435f, 0xf124183b, 0x821dba9f,
X0xaff60ff4, 0xea2c4e6d, 0x16e39264, 0x92544a8b, 0x009b4fc3,
X0xaba68ced, 0x9ac96f78, 0x06a5b79a, 0xb2856e6e, 0x1aec3ca9,
X0xbe838688, 0x0e0804e9, 0x55f1be56, 0xe7e5363b, 0xb3a1f25d,
X0xf7debb85, 0x61fe033c, 0x16746233, 0x3c034c28, 0xda6d0c74,
X0x79aac56c, 0x3ce4e1ad, 0x51f0c802, 0x98f8f35a, 0x1626a49f,
X0xeed82b29, 0x1d382fe3, 0x0c4fb99a, 0xbb325778, 0x3ec6d97b,
X0x6e77a6a9, 0xcb658b5c, 0xd45230c7, 0x2bd1408b, 0x60c03eb7,
X0xb9068d78, 0xa33754f4, 0xf430c87d, 0xc8a71302, 0xb96d8c32,
X0xebd4e7be, 0xbe8b9d2d, 0x7979fb06, 0xe7225308, 0x8b75cf77,
X0x11ef8da4, 0xe083c858, 0x8d6b786f, 0x5a6317a6, 0xfa5cf7a0,
X0x5dda0033, 0xf28ebfb0, 0xf5b9c310, 0xa0eac280, 0x08b9767a,
X0xa3d9d2b0, 0x79d34217, 0x021a718d, 0x9ac6336a, 0x2711fd60,
X0x438050e3, 0x069908a8, 0x3d7fedc4, 0x826d2bef, 0x4eeb8476,
X0x488dcf25, 0x36c9d566, 0x28e74e41, 0xc2610aca, 0x3d49a9cf,
X0xbae3b9df, 0xb65f8de6, 0x92aeaf64, 0x3ac7d5e6, 0x9ea80509,
X0xf22b017d, 0xa4173f70, 0xdd1e16c3, 0x15e0d7f9, 0x50b1b887,
X0x2b9f4fd5, 0x625aba82, 0x6a017962, 0x2ec01b9c, 0x15488aa9,
X0xd716e740, 0x40055a2c, 0x93d29a22, 0xe32dbf9a, 0x058745b9,
X0x3453dc1e, 0xd699296e, 0x496cff6f, 0x1c9f4986, 0xdfe2ed07,
X0xb87242d1, 0x19de7eae, 0x053e561a, 0x15ad6f8c, 0x66626c1c,
X0x7154c24c, 0xea082b2a, 0x93eb2939, 0x17dcb0f0, 0x58d4f2ae,
X0x9ea294fb, 0x52cf564c, 0x9883fe66, 0x2ec40581, 0x763953c3,
X0x01d6692e, 0xd3a0c108, 0xa1e7160e, 0xe4f2dfa6, 0x693ed285,
X0x74904698, 0x4c2b0edd, 0x4f757656, 0x5d393378, 0xa132234f,
X0x3d321c5d, 0xc3f5e194, 0x4b269301, 0xc79f022f, 0x3c997e7e,
X0x5e4f9504, 0x3ffafbbd, 0x76f7ad0e, 0x296693f4, 0x3d1fce6f,
X0xc61e45be, 0xd3b5ab34, 0xf72bf9b7, 0x1b0434c0, 0x4e72b567,
X0x5592a33d, 0xb5229301, 0xcfd2a87f, 0x60aeb767, 0x1814386b,
X0x30bcc33d, 0x38a0c07d, 0xfd1606f2, 0xc363519b, 0x589dd390,
X0x5479f8e6, 0x1cb8d647, 0x97fd61a9, 0xea7759f4, 0x2d57539d,
X0x569a58cf, 0xe84e63ad, 0x462e1b78, 0x6580f87e, 0xf3817914,
X0x91da55f4, 0x40a230f3, 0xd1988f35, 0xb6e318d2, 0x3ffa50bc,
X0x3d40f021, 0xc3c0bdae, 0x4958c24c, 0x518f36b2, 0x84b1d370,
X0x0fedce83, 0x878ddada, 0xf2a279c7, 0x94e01be8, 0x90716f4b,
X0x954b8aa3 };
X
Xstatic const uint32 S8[256] = {
X0xe216300d, 0xbbddfffc, 0xa7ebdabd, 0x35648095, 0x7789f8b7,
X0xe6c1121b, 0x0e241600, 0x052ce8b5, 0x11a9cfb0, 0xe5952f11,
X0xece7990a, 0x9386d174, 0x2a42931c, 0x76e38111, 0xb12def3a,
X0x37ddddfc, 0xde9adeb1, 0x0a0cc32c, 0xbe197029, 0x84a00940,
X0xbb243a0f, 0xb4d137cf, 0xb44e79f0, 0x049eedfd, 0x0b15a15d,
X0x480d3168, 0x8bbbde5a, 0x669ded42, 0xc7ece831, 0x3f8f95e7,
X0x72df191b, 0x7580330d, 0x94074251, 0x5c7dcdfa, 0xabbe6d63,
X0xaa402164, 0xb301d40a, 0x02e7d1ca, 0x53571dae, 0x7a3182a2,
X0x12a8ddec, 0xfdaa335d, 0x176f43e8, 0x71fb46d4, 0x38129022,
X0xce949ad4, 0xb84769ad, 0x965bd862, 0x82f3d055, 0x66fb9767,
X0x15b80b4e, 0x1d5b47a0, 0x4cfde06f, 0xc28ec4b8, 0x57e8726e,
X0x647a78fc, 0x99865d44, 0x608bd593, 0x6c200e03, 0x39dc5ff6,
X0x5d0b00a3, 0xae63aff2, 0x7e8bd632, 0x70108c0c, 0xbbd35049,
X0x2998df04, 0x980cf42a, 0x9b6df491, 0x9e7edd53, 0x06918548,
X0x58cb7e07, 0x3b74ef2e, 0x522fffb1, 0xd24708cc, 0x1c7e27cd,
X0xa4eb215b, 0x3cf1d2e2, 0x19b47a38, 0x424f7618, 0x35856039,
X0x9d17dee7, 0x27eb35e6, 0xc9aff67b, 0x36baf5b8, 0x09c467cd,
X0xc18910b1, 0xe11dbf7b, 0x06cd1af8, 0x7170c608, 0x2d5e3354,
X0xd4de495a, 0x64c6d006, 0xbcc0c62c, 0x3dd00db3, 0x708f8f34,
X0x77d51b42, 0x264f620f, 0x24b8d2bf, 0x15c1b79e, 0x46a52564,
X0xf8d7e54e, 0x3e378160, 0x7895cda5, 0x859c15a5, 0xe6459788,
X0xc37bc75f, 0xdb07ba0c, 0x0676a3ab, 0x7f229b1e, 0x31842e7b,
X0x24259fd7, 0xf8bef472, 0x835ffcb8, 0x6df4c1f2, 0x96f5b195,
X0xfd0af0fc, 0xb0fe134c, 0xe2506d3d, 0x4f9b12ea, 0xf215f225,
X0xa223736f, 0x9fb4c428, 0x25d04979, 0x34c713f8, 0xc4618187,
X0xea7a6e98, 0x7cd16efc, 0x1436876c, 0xf1544107, 0xbedeee14,
X0x56e9af27, 0xa04aa441, 0x3cf7c899, 0x92ecbae6, 0xdd67016d,
X0x151682eb, 0xa842eedf, 0xfdba60b4, 0xf1907b75, 0x20e3030f,
X0x24d8c29e, 0xe139673b, 0xefa63fb8, 0x71873054, 0xb6f2cf3b,
X0x9f326442, 0xcb15a4cc, 0xb01a4504, 0xf1e47d8d, 0x844a1be5,
X0xbae7dfdc, 0x42cbda70, 0xcd7dae0a, 0x57e85b7a, 0xd53f5af6,
X0x20cf4d8c, 0xcea4d428, 0x79d130a4, 0x3486ebfb, 0x33d3cddc,
X0x77853b53, 0x37effcb5, 0xc5068778, 0xe580b3e6, 0x4e68b8f4,
X0xc5c8b37e, 0x0d809ea2, 0x398feb7c, 0x132a4f94, 0x43b7950e,
X0x2fee7d1c, 0x223613bd, 0xdd06caa2, 0x37df932b, 0xc4248289,
X0xacf3ebc3, 0x5715f6b7, 0xef3478dd, 0xf267616f, 0xc148cbe4,
X0x9052815e, 0x5e410fab, 0xb48a2465, 0x2eda7fa4, 0xe87b40e4,
X0xe98ea084, 0x5889e9e1, 0xefd390fc, 0xdd07d35b, 0xdb485694,
X0x38d7e5b2, 0x57720101, 0x730edebc, 0x5b643113, 0x94917e4f,
X0x503c2fba, 0x646f1282, 0x7523d24a, 0xe0779695, 0xf9c17a8f,
X0x7a5b2121, 0xd187b896, 0x29263a4d, 0xba510cdf, 0x81f47c9f,
X0xad1163ed, 0xea7b5965, 0x1a00726e, 0x11403092, 0x00da6d77,
X0x4a0cdd61, 0xad1f4603, 0x605bdfb0, 0x9eedc364, 0x22ebe6a8,
X0xcee7d28a, 0xa0e736a0, 0x5564a6b9, 0x10853209, 0xc7eb8f37,
X0x2de705ca, 0x8951570f, 0xdf09822b, 0xbd691a6c, 0xaa12e4f2,
X0x87451c0f, 0xe0f6a27a, 0x3ada4819, 0x4cf1764f, 0x0d771c2b,
X0x67cdb156, 0x350d8384, 0x5938fa0f, 0x42399ef3, 0x36997b07,
X0x0e84093d, 0x4aa93e61, 0x8360d87b, 0x1fa98b0c, 0x1149382c,
X0xe97625a5, 0x0614d1b7, 0x0e25244b, 0x0c768347, 0x589e8d82,
X0x0d2059d1, 0xa466bb1e, 0xf8da0a82, 0x04f19130, 0xba6e4ec0,
X0x99265164, 0x1ee7230d, 0x50b2ad80, 0xeaee6801, 0x8db2a283,
X0xea8bf59e };
X
SHAR_EOF
if test 24921 -ne "`wc -c < 'cast5.c'`"
then
	echo shar: error transmitting "'cast5.c'" '(should have been 24921 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'casttest.py'" '(675 characters)'
if test -f 'casttest.py'
then
	echo shar: will not over-write existing file "'casttest.py'"
else
sed 's/^X//' << \SHAR_EOF > 'casttest.py'
X
Ximport cast
X
Xtestkey = '\x01\x23\x45\x67\x12\x34\x56\x78\x23\x45\x67\x89\x34\x56\x78\x9A'
Xtestdata = '\x01\x23\x45\x67\x89\xAB\xCD\xEF'
X
Xcipher128 = '\x23\x8B\x4F\xE5\x84\x7E\x44\xB2'
Xcipher80  = '\xEB\x6A\x71\x1A\x2C\x02\x27\x1B'
Xcipher40  = '\x7A\xC8\x16\xD1\x6E\x9B\x30\x2E'
X
Xprint 'cast-128:',
Xk = cast.new(testkey, cast.ECB)
Xif k.encrypt(testdata) == cipher128:
X    print 'ok'
Xelse:
X    print 'not ok'
X
Xprint 'cast5-80:',
Xk = cast.new(testkey[:10], cast.ECB)
Xif k.encrypt(testdata) == cipher80:
X    print 'ok'
Xelse:
X    print 'not ok'
X
Xprint 'cast5-40:',
Xk = cast.new(testkey[:5], cast.ECB)
Xif k.encrypt(testdata) == cipher40:
X    print 'ok'
Xelse:
X    print 'not ok'
X
X
SHAR_EOF
if test 675 -ne "`wc -c < 'casttest.py'`"
then
	echo shar: error transmitting "'casttest.py'" '(should have been 675 characters)'
fi
fi # end of overwriting check
#	End of shell archive
exit 0




-----BEGIN PGP SIGNATURE-----
Version: 2.6.2
Comment: Processed by Mailcrypt 3.4, an Emacs/PGP interface

iQCVAwUBM90jSV8UnN8n93LBAQFiFgQAqoqtg7jvvYdJpfsVu3Qg5FbbBI9EH1An
NtRKtUTU44v/cF1Bs/J7WBXtWrEC7nqb4LApFSL8RcKrWDZRcjFhb4nHyFkJpAg8
hSHXi3LTZLMh1D/o0cm5YA/BCp1RnAQCPpnSJvfPc/H6m2KpjmdeZcp1dYBF77EH
vpa7UKaJuDg=
=i+5W
-----END PGP SIGNATURE-----

