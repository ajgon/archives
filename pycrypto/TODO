
* Restore RC5, which needs additional keyword arguments

* Look at the C code and modernize it to the current memory APIs,
  class-based exceptions, etc

* Change API to reduce amount of memory copying

* Document the functions and macros for adding a new algorithm
    Hash functions:
  hash_init(), hash_copy(), DIGEST_SIZE, hash_update(), hash_digest()
    Block functions: 
  ...

* Break backward compatibility.  The interfaces were invented around
1995, back when I was younger and dumber.  I'd like to clean them up,
cruelly breaking backward compatibility where necessary, and release
the new code as version 2.0 to signal the magnitude of the changes.
While we have the chance, we can also drop useless code, rename
packages and classes, or whatever.
 
* Should there be a backword-compatibility wrapper for
  Crypto/Hash/MD5.py, containing just 'from md5 import *' and a
  warning message?  (Ditto for Crypto/Hash/SHA.py.)
 
* Modernize the code to current standards (Distutils installation,
docstrings, naming conventions, test suites).  
 
* Possibly add SHA256, SHA512.

* Public-key stuff: should it remain in this package, or should it be
scrapped and the scope restricted to hashing and block encryption?
Public-key is much harder to define and implement, so I think
splitting it out into a separate distribution is the right thing to
do.

* Provide drop-in support for extensions/drivers like
amkCrypto/mxCrypto. There should be some way to register these
drivers in your package, e.g. by defining a certain subdirectory
to be a place where pycrypto looks for these drivers at startup
time.

* Add a secure PRNG (Yarrow, maybe?)


The old TODO list follows:

Core algorithms:
	Elliptic-curve algs should be added; they're not a priority for now. 
	A secret sharing module should be added to Util or Protocols.
	
Protocols:
	Implement ssh
	Add PGP modules to the package, rearranging them to fit.

Generic cryptographic stuff: 
	Optimize the feedback modes a bit

Demo programs:
	Shadowing of files into X parts
	Secure talk or telnet

Documentation:
	Document chaff/winnow better
	Add docstrings everywhere.

Config stuff:
	Smarter distribution building 
	
