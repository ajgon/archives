#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require('fs');

/**
 * Arguments.
 */

var args = process.argv.slice(2);

/**
 * Option defaults.
 */

var options = {
    path: process.cwd() + '/migrations'
  , args: []
};

/**
 * Usage information.
 */

var usage = [
    ''
  , '  Usage: migrate [options] [command]'
  , ''
  , '  Options:'
  , ''
  , '     -p, --path <path>   set the operation path'
  , ''
  , '  Commands:'
  , ''
  , '     create [title]    create a new migration file with optional [title]'
  , ''
].join('\n');

/**
 * Migration template.
 */

var template = [
    ''
  , 'exports.up = function(next){'
  , '  next();'
  , '};'
  , ''
  , 'exports.down = function(next){'
  , '  next();'
  , '};'
  , ''
].join('\n');

// require an argument

function required() {
  if (args.length) return args.shift();
  abort(arg + ' requires an argument');
}

// abort with a message

function abort(msg) {
  console.error(msg);
  process.exit(1);
}

// parse arguments

var arg;
while (args.length) {
  arg = args.shift();
  switch (arg) {
    case '-h':
    case '--help':
    case 'help':
      console.log(usage);
      process.exit();
      break;
    case '-p':
    case '--path':
      options.path = required();
      break;
    default:
      if (options.command) {
        options.args.push(arg);
      } else {
        options.command = arg;
      }
  }
}

/**
 * Load configuration.
 */

function loadConfig() {
  try {
    return JSON.parse(fs.readFileSync(options.path + '/migrate.json', 'utf8'));
  } catch (err) {
    return { prev: -1 };
  }
}

/**
 * Save configuration.
 */

function saveConfig(obj) {
  var json = JSON.stringify(obj);
  fs.writeFileSync(options.path + '/migrate.json', json);
}

/**
 * Log a keyed message.
 */

function log(key, msg) {
  console.log('  \033[90m%s :\033[0m \033[36m%s\033[0m', key, msg);
}

// load config

var config = loadConfig();

// commands

var commands = {
  up: function(){
    // no migrations
    if (-1 == config.prev) abort('add migrations before running $ migrate up');
  },
  
  down: function(){
    // no migrations
    if (-1 == config.prev) abort('add migrations before running $ migrate down');
  },
  
  create: function(){
    var curr = ++config.prev
      , title = Array.prototype.slice.call(arguments).join(' ');

    // append '-' when title is present
    title = title ? curr + '-' + title : curr; 

    var path = options.path + '/' + title + '.js';
    log('create', path);
    fs.writeFileSync(path, template);
    saveConfig(config);
  }
};

// invoke command

var command = options.command || 'up';
if (!(command in commands)) abort('unknown command "' + command + '"');
command = commands[command];
console.log();
command.apply(this, options.args);
console.log();

